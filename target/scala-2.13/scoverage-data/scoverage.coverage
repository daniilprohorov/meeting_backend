# Coverage data, format version: 2.0
# Statement data:
# - id
# - source path
# - package name
# - class name
# - class type (Class, Object or Trait)
# - full class name
# - method name
# - start offset
# - end offset
# - line number
# - symbol name
# - tree name
# - is branch
# - invocations count
# - is ignored
# - description (can be multi-line)
# '' sign
# ------------------------------------------
1
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Utils
Object
example.Utils
toTry
469
488
17
scala.util.Success.apply
Apply
false
0
false
scala.util.Success.apply[A](categories)

2
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Utils
Object
example.Utils
toTry
545
563
18
java.lang.Throwable.getMessage
Apply
false
0
false
error.getMessage()

3
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Utils
Object
example.Utils
toTry
523
564
18
java.lang.RuntimeException.<init>
Apply
false
0
false
new scala.`package`.RuntimeException(error.getMessage())

4
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Utils
Object
example.Utils
toTry
515
565
18
scala.util.Failure.apply
Apply
false
0
false
scala.util.Failure.apply[Nothing](new scala.`package`.RuntimeException(error.getMessage()))

5
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Utils
Object
example.Utils
toTry
598
643
19
java.lang.RuntimeException.<init>
Apply
false
0
false
new scala.`package`.RuntimeException("Http request is Null")

6
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Utils
Object
example.Utils
toTry
590
644
19
scala.util.Failure.apply
Apply
false
0
false
scala.util.Failure.apply[Nothing](new scala.`package`.RuntimeException("Http request is Null"))

7
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Utils
Object
example.Utils
parseTime
717
770
22
org.joda.time.format.DateTimeFormatter.parseDateTime
Apply
false
0
false
com.github.nscala_time.time.Imports.DateTimeFormat.forPattern("HH:mm").parseDateTime(str)

8
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Utils
Object
example.Utils
parseTime
776
793
23
org.joda.time.base.AbstractDateTime.getHourOfDay
Apply
false
0
false
time.getHourOfDay()

9
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Utils
Object
example.Utils
parseTime
795
815
23
org.joda.time.base.AbstractDateTime.getMinuteOfHour
Apply
false
0
false
time.getMinuteOfHour()

10
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Utils
Object
example.Utils
parseTime
775
816
23
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[Int, Int](time.getHourOfDay(), time.getMinuteOfHour())

11
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Utils
Object
example.Utils
bind
927
931
27
scala.Function1.apply
Apply
false
0
false
f.apply(v)

12
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Utils
Object
example.Utils
bind
919
932
27
scala.util.Success.apply
Apply
false
0
false
scala.util.Success.apply[B](f.apply(v))

13
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Utils
Object
example.Utils
bind
958
968
28
scala.util.Failure.apply
Apply
false
0
false
scala.util.Failure.apply[Nothing](e)

14
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
<none>
1107
1119
38
<nosymbol>
Literal
false
0
false
"config.txt"

15
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
writeFile
1222
1240
41
java.io.File.<init>
Apply
false
0
false
new java.io.File(filename)

16
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
writeFile
1273
1293
42
java.io.FileWriter.<init>
Apply
false
0
false
new java.io.FileWriter(file)

17
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
writeFile
1254
1294
42
java.io.BufferedWriter.<init>
Apply
false
0
false
new java.io.BufferedWriter(new java.io.FileWriter(file))

18
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
writeFile
1299
1310
43
java.io.Writer.write
Apply
false
0
false
bw.write(s)

19
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
writeFile
1315
1325
44
java.io.BufferedWriter.close
Apply
false
0
false
bw.close()

20
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
1758
1773
60
example.Config.ConfigData.city
Select
false
0
false
configData.city

21
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
1788
1809
61
example.Config.ConfigData.categories
Select
false
0
false
configData.categories

22
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
1824
1838
62
example.Config.ConfigData.mon
Select
false
0
false
configData.mon

23
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
1853
1867
63
example.Config.ConfigData.tue
Select
false
0
false
configData.tue

24
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
1882
1896
64
example.Config.ConfigData.wed
Select
false
0
false
configData.wed

25
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
1911
1925
65
example.Config.ConfigData.thu
Select
false
0
false
configData.thu

26
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
1940
1954
66
example.Config.ConfigData.fri
Select
false
0
false
configData.fri

27
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
1969
1983
67
example.Config.ConfigData.sat
Select
false
0
false
configData.sat

28
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
1998
2012
68
example.Config.ConfigData.sun
Select
false
0
false
configData.sun

29
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2028
2043
69
example.Config.ConfigData.days
Select
false
0
false
configData.days

30
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2077
2095
71
<nosymbol>
Literal
false
0
false
"\n City       = "

31
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2099
2112
71
java.lang.String.toString
Apply
false
0
false
city.toString()

32
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2077
2112
71
scala.collection.StringOps.++
Apply
false
0
false
scala.Predef.augmentString("\n City       = ").++(city.toString())

33
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2120
2138
72
<nosymbol>
Literal
false
0
false
"\n Categories = "

34
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2143
2160
72
scala.collection.IterableOnceOps.mkString
Apply
false
0
false
cat.mkString(", ")

35
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2120
2161
72
scala.collection.StringOps.++
Apply
false
0
false
scala.Predef.augmentString("\n Categories = ").++(cat.mkString(", "))

36
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2169
2187
73
<nosymbol>
Literal
false
0
false
"\n Monday     = "

37
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2192
2231
73
scala.collection.IterableOnceOps.mkString
Apply
false
0
false
mon.map[String](((x$1: List[String]) => x$1.mkString(" - "))).mkString("; ")

38
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2169
2233
73
scala.collection.StringOps.++
Apply
false
0
false
scala.Predef.augmentString("\n Monday     = ").++(mon.map[String](((x$1: List[String]) => x$1.mkString(" - "))).mkString("; "))

39
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2241
2259
74
<nosymbol>
Literal
false
0
false
"\n Tuesday    = "

40
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2264
2303
74
scala.collection.IterableOnceOps.mkString
Apply
false
0
false
tue.map[String](((x$2: List[String]) => x$2.mkString(" - "))).mkString("; ")

41
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2241
2305
74
scala.collection.StringOps.++
Apply
false
0
false
scala.Predef.augmentString("\n Tuesday    = ").++(tue.map[String](((x$2: List[String]) => x$2.mkString(" - "))).mkString("; "))

42
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2313
2331
75
<nosymbol>
Literal
false
0
false
"\n Wednesday  = "

43
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2336
2375
75
scala.collection.IterableOnceOps.mkString
Apply
false
0
false
wed.map[String](((x$3: List[String]) => x$3.mkString(" - "))).mkString("; ")

44
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2313
2377
75
scala.collection.StringOps.++
Apply
false
0
false
scala.Predef.augmentString("\n Wednesday  = ").++(wed.map[String](((x$3: List[String]) => x$3.mkString(" - "))).mkString("; "))

45
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2385
2403
76
<nosymbol>
Literal
false
0
false
"\n Thursday   = "

46
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2408
2447
76
scala.collection.IterableOnceOps.mkString
Apply
false
0
false
thu.map[String](((x$4: List[String]) => x$4.mkString(" - "))).mkString("; ")

47
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2385
2449
76
scala.collection.StringOps.++
Apply
false
0
false
scala.Predef.augmentString("\n Thursday   = ").++(thu.map[String](((x$4: List[String]) => x$4.mkString(" - "))).mkString("; "))

48
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2457
2475
77
<nosymbol>
Literal
false
0
false
"\n Friday     = "

49
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2480
2519
77
scala.collection.IterableOnceOps.mkString
Apply
false
0
false
fri.map[String](((x$5: List[String]) => x$5.mkString(" - "))).mkString("; ")

50
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2457
2521
77
scala.collection.StringOps.++
Apply
false
0
false
scala.Predef.augmentString("\n Friday     = ").++(fri.map[String](((x$5: List[String]) => x$5.mkString(" - "))).mkString("; "))

51
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2529
2547
78
<nosymbol>
Literal
false
0
false
"\n Saturday   = "

52
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2552
2591
78
scala.collection.IterableOnceOps.mkString
Apply
false
0
false
sat.map[String](((x$6: List[String]) => x$6.mkString(" - "))).mkString("; ")

53
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2529
2593
78
scala.collection.StringOps.++
Apply
false
0
false
scala.Predef.augmentString("\n Saturday   = ").++(sat.map[String](((x$6: List[String]) => x$6.mkString(" - "))).mkString("; "))

54
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2601
2619
79
<nosymbol>
Literal
false
0
false
"\n Sunday     = "

55
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2624
2663
79
scala.collection.IterableOnceOps.mkString
Apply
false
0
false
sun.map[String](((x$7: List[String]) => x$7.mkString(" - "))).mkString("; ")

56
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2601
2665
79
scala.collection.StringOps.++
Apply
false
0
false
scala.Predef.augmentString("\n Sunday     = ").++(sun.map[String](((x$7: List[String]) => x$7.mkString(" - "))).mkString("; "))

57
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2673
2691
80
<nosymbol>
Literal
false
0
false
"\n Days       = "

58
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2695
2708
80
scala.Any.toString
Apply
false
0
false
days.toString()

59
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2673
2708
80
scala.collection.StringOps.++
Apply
false
0
false
scala.Predef.augmentString("\n Days       = ").++(days.toString())

60
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2065
2709
70
scala.collection.IterableFactory.apply
Apply
false
0
false
scala.collection.immutable.List.apply[String](scala.Predef.augmentString("\n City       = ").++(city.toString()), scala.Predef.augmentString("\n Categories = ").++(cat.mkString(", ")), scala.Predef.augmentString("\n Monday     = ").++(mon.map[String](((x$1: List[String]) => x$1.mkString(" - "))).mkString("; ")), scala.Predef.augmentString("\n Tuesday    = ").++(tue.map[String](((x$2: List[String]) => x$2.mkString(" - "))).mkString("; ")), scala.Predef.augmentString("\n Wednesday  = ").++(wed.map[String](((x$3: List[String]) => x$3.mkString(" - "))).mkString("; ")), scala.Predef.augmentString("\n Thursday   = ").++(thu.map[String](((x$4: List[String]) => x$4.mkString(" - "))).mkString("; ")), scala.Predef.augmentString("\n Friday     = ").++(fri.map[String](((x$5: List[String]) => x$5.mkString(" - "))).mkString("; ")), scala.Predef.augmentString("\n Saturday   = ").++(sat.map[String](((x$6: List[String]) => x$6.mkString(" - "))).mkString("; ")), scala.Predef.augmentString("\n Sunday     = ").++(sun.map[String](((x$7: List[String]) => x$7.mkString(" - "))).mkString("; ")), scala.Predef.augmentString("\n Days       = ").++(days.toString()))

61
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
showConfigData
2714
2736
81
scala.collection.IterableOnceOps.mkString
Apply
false
0
false
outputList.mkString("")

62
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
config
2928
2958
91
scala.collection.IterableOnceOps.mkString
Apply
false
0
false
scala.io.Source.fromFile(Config.this.filename)(io.this.Codec.fallbackSystemCodec).mkString("")

63
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
config
3011
3024
92
io.circe.generic.semiauto.deriveDecoder
ApplyToImplicitArgs
false
0
false
io.circe.generic.semiauto.deriveDecoder[example.Config.ConfigData]({
  val inst$macro$26: io.circe.generic.decoding.DerivedDecoder[example.Config.ConfigData] = {
    final class anon$lazy$macro$25 extends AnyRef with Serializable {
      def <init>(): anon$lazy$macro$25 = {
        anon$lazy$macro$25.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$1: io.circe.generic.decoding.DerivedDecoder[example.Config.ConfigData] = decoding.this.DerivedDecoder.deriveDecoder[example.Config.ConfigData, shapeless.labelled.FieldType[Symbol @@ String("city"),String] :: shapeless.labelled.FieldType[Symbol @@ String("categories"),List[String]] :: shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.Config.ConfigData, (Symbol @@ String("city")) :: (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, String :: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("city"),String] :: shapeless.labelled.FieldType[Symbol @@ String("categories"),List[String]] :: shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.Config.ConfigData] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.Config.ConfigData]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("city")) :: (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("city")) :: (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("city"), (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("city").asInstanceOf[Symbol @@ String("city")], shapeless.::.apply[Symbol @@ String("categories"), (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("categories").asInstanceOf[Symbol @@ String("categories")], shapeless.::.apply[Symbol @@ String("mon"), (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("mon").asInstanceOf[Symbol @@ String("mon")], shapeless.::.apply[Symbol @@ String("tue"), (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("tue").asInstanceOf[Symbol @@ String("tue")], shapeless.::.apply[Symbol @@ String("wed"), (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("wed").asInstanceOf[Symbol @@ String("wed")], shapeless.::.apply[Symbol @@ String("thu"), (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("thu").asInstanceOf[Symbol @@ String("thu")], shapeless.::.apply[Symbol @@ String("fri"), (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("fri").asInstanceOf[Symbol @@ String("fri")], shapeless.::.apply[Symbol @@ String("sat"), (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("sat").asInstanceOf[Symbol @@ String("sat")], shapeless.::.apply[Symbol @@ String("sun"), (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("sun").asInstanceOf[Symbol @@ String("sun")], shapeless.::.apply[Symbol @@ String("days"), shapeless.HNil.type](scala.Symbol.apply("days").asInstanceOf[Symbol @@ String("days")], shapeless.HNil))))))))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.Config.ConfigData,(Symbol @@ String("city")) :: (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil]), {
  final class anon$macro$23 extends AnyRef with shapeless.Generic[example.Config.ConfigData] {
    def <init>(): anon$macro$23 = {
      anon$macro$23.super.<init>();
      ()
    };
    type Repr = String :: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil;
    def to(p: example.Config.ConfigData): anon$macro$23.this.Repr = p match {
  case (city: String, categories: List[String], mon: List[List[String]], tue: List[List[String]], wed: List[List[String]], thu: List[List[String]], fri: List[List[String]], sat: List[List[String]], sun: List[List[String]], days: Int)example.Config.ConfigData((pat$macro$13 @ _), (pat$macro$14 @ _), (pat$macro$15 @ _), (pat$macro$16 @ _), (pat$macro$17 @ _), (pat$macro$18 @ _), (pat$macro$19 @ _), (pat$macro$20 @ _), (pat$macro$21 @ _), (pat$macro$22 @ _)) => shapeless.::.apply[String, List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$13, shapeless.::.apply[List[String], List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$14, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$15, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$16, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$17, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$18, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$19, shapeless.::.apply[List[List[String]], List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$20, shapeless.::.apply[List[List[String]], Int :: shapeless.HNil.type](pat$macro$21, shapeless.::.apply[Int, shapeless.HNil.type](pat$macro$22, shapeless.HNil))))))))))
}.asInstanceOf[anon$macro$23.this.Repr];
    def from(p: anon$macro$23.this.Repr): example.Config.ConfigData = p match {
      case (head: String, tail: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)String :: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$13 @ _), (head: List[String], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$14 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$15 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$16 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$17 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$18 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$19 @ _), (head: List[List[String]], tail: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$20 @ _), (head: List[List[String]], tail: Int :: shapeless.HNil)List[List[String]] :: Int :: shapeless.HNil((pat$macro$21 @ _), (head: Int, tail: shapeless.HNil)Int :: shapeless.HNil((pat$macro$22 @ _), shapeless.HNil)))))))))) => Config.this.ConfigData.apply(pat$macro$13, pat$macro$14, pat$macro$15, pat$macro$16, pat$macro$17, pat$macro$18, pat$macro$19, pat$macro$20, pat$macro$21, pat$macro$22)
    }
  };
  (new anon$macro$23(): shapeless.Generic.Aux[example.Config.ConfigData,String :: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("city"), String, (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("categories"),List[String]] :: shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("categories"), List[String], (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("mon"), List[List[String]], (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("tue"), List[List[String]], (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("wed"), List[List[String]], (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("thu"), List[List[String]], (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("fri"), List[List[String]], (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("sat"), List[List[String]], (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("sun"), List[List[String]], (Symbol @@ String("days")) :: shapeless.HNil, Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("days"), Int, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("days")]](scala.Symbol.apply("days").asInstanceOf[Symbol @@ String("days")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("days")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("sun")]](scala.Symbol.apply("sun").asInstanceOf[Symbol @@ String("sun")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("sun")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("sat")]](scala.Symbol.apply("sat").asInstanceOf[Symbol @@ String("sat")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("sat")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("fri")]](scala.Symbol.apply("fri").asInstanceOf[Symbol @@ String("fri")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("fri")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("thu")]](scala.Symbol.apply("thu").asInstanceOf[Symbol @@ String("thu")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("thu")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("wed")]](scala.Symbol.apply("wed").asInstanceOf[Symbol @@ String("wed")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("wed")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("tue")]](scala.Symbol.apply("tue").asInstanceOf[Symbol @@ String("tue")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("tue")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("mon")]](scala.Symbol.apply("mon").asInstanceOf[Symbol @@ String("mon")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("mon")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("categories")]](scala.Symbol.apply("categories").asInstanceOf[Symbol @@ String("categories")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("categories")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("city")]](scala.Symbol.apply("city").asInstanceOf[Symbol @@ String("city")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("city")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("city"),String] :: shapeless.labelled.FieldType[Symbol @@ String("categories"),List[String]] :: shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]](anon$lazy$macro$25.this.inst$macro$24)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.Config.ConfigData]];
      <stable> <accessor> lazy val inst$macro$24: io.circe.generic.decoding.ReprDecoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForcity: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    private[this] val circeGenericDecoderForcategories: io.circe.Decoder[List[String]] = circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericDecoderForsun: io.circe.Decoder[List[List[String]]] = circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString));
    private[this] val circeGenericDecoderFordays: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("city")], String, List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]($anon.this.circeGenericDecoderForcity.tryDecode(c.downField("city")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("categories")], List[String], List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]($anon.this.circeGenericDecoderForcategories.tryDecode(c.downField("categories")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("mon")], List[List[String]], List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]($anon.this.circeGenericDecoderForsun.tryDecode(c.downField("mon")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("tue")], List[List[String]], List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]($anon.this.circeGenericDecoderForsun.tryDecode(c.downField("tue")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("wed")], List[List[String]], List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]($anon.this.circeGenericDecoderForsun.tryDecode(c.downField("wed")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("thu")], List[List[String]], List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]($anon.this.circeGenericDecoderForsun.tryDecode(c.downField("thu")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("fri")], List[List[String]], List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]($anon.this.circeGenericDecoderForsun.tryDecode(c.downField("fri")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("sat")], List[List[String]], List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]($anon.this.circeGenericDecoderForsun.tryDecode(c.downField("sat")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("sun")], List[List[String]], Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]($anon.this.circeGenericDecoderForsun.tryDecode(c.downField("sun")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("days")], Int, shapeless.HNil]($anon.this.circeGenericDecoderFordays.tryDecode(c.downField("days")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("city")], String, List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]($anon.this.circeGenericDecoderForcity.tryDecodeAccumulating(c.downField("city")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("categories")], List[String], List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]($anon.this.circeGenericDecoderForcategories.tryDecodeAccumulating(c.downField("categories")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("mon")], List[List[String]], List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]($anon.this.circeGenericDecoderForsun.tryDecodeAccumulating(c.downField("mon")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("tue")], List[List[String]], List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]($anon.this.circeGenericDecoderForsun.tryDecodeAccumulating(c.downField("tue")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("wed")], List[List[String]], List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]($anon.this.circeGenericDecoderForsun.tryDecodeAccumulating(c.downField("wed")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("thu")], List[List[String]], List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]($anon.this.circeGenericDecoderForsun.tryDecodeAccumulating(c.downField("thu")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("fri")], List[List[String]], List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]($anon.this.circeGenericDecoderForsun.tryDecodeAccumulating(c.downField("fri")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("sat")], List[List[String]], List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]($anon.this.circeGenericDecoderForsun.tryDecodeAccumulating(c.downField("sat")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("sun")], List[List[String]], Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]($anon.this.circeGenericDecoderForsun.tryDecodeAccumulating(c.downField("sun")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("days")], Int, shapeless.HNil]($anon.this.circeGenericDecoderFordays.tryDecodeAccumulating(c.downField("days")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]]
    };
    new anon$lazy$macro$25().inst$macro$1
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.Config.ConfigData]](inst$macro$26)
})

64
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
config
3033
3059
93
io.circe.Parser.decode
ApplyToImplicitArgs
false
0
false
io.circe.parser.`package`.decode[example.Config.ConfigData](config)(decoder)

65
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
config
3063
3068
93
example.Utils.toTry
Apply
false
0
false
Utils.toTry[example.Config.ConfigData](either)

66
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
config
3033
3068
93
scalaz.syntax.IdOps.|>
Apply
false
0
false
scalaz.Scalaz.ToIdOps[Either[io.circe.Error,example.Config.ConfigData]](io.circe.parser.`package`.decode[example.Config.ConfigData](config)(decoder)).|>[scala.util.Try[example.Config.ConfigData]](((either: Either[io.circe.Error,example.Config.ConfigData]) => Utils.toTry[example.Config.ConfigData](either)))

67
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
getDayTimetable
3204
3214
98
example.Config.ConfigData.mon
Select
false
0
false
config.mon

68
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
getDayTimetable
3235
3245
99
example.Config.ConfigData.tue
Select
false
0
false
config.tue

69
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
getDayTimetable
3266
3276
100
example.Config.ConfigData.wed
Select
false
0
false
config.wed

70
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
getDayTimetable
3297
3307
101
example.Config.ConfigData.thu
Select
false
0
false
config.thu

71
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
getDayTimetable
3328
3338
102
example.Config.ConfigData.fri
Select
false
0
false
config.fri

72
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
getDayTimetable
3359
3369
103
example.Config.ConfigData.sat
Select
false
0
false
config.sat

73
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
getDayTimetable
3390
3400
104
example.Config.ConfigData.sun
Select
false
0
false
config.sun

74
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
updateTime
3592
3592
110
scala.Tuple2._1
Select
false
0
false
x$8._1

75
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
updateTime
3596
3596
110
scala.Tuple2._2
Select
false
0
false
x$8._2

76
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
updateTime
3640
3640
111
scala.Tuple2._1
Select
false
0
false
x$9._1

77
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
updateTime
3644
3644
111
scala.Tuple2._2
Select
false
0
false
x$9._2

78
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
updateTime
3697
3714
112
com.github.nscala_time.time.RichDateTimeProperty.apply
Apply
false
0
false
com.github.nscala_time.time.Imports.richDateTimeProperty(com.github.nscala_time.time.Imports.richDateTime(dateTime).hour).apply(h1)

79
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
updateTime
3697
3721
112
com.github.nscala_time.time.RichDateTime.minute
Select
false
0
false
com.github.nscala_time.time.Imports.richDateTime(com.github.nscala_time.time.Imports.richDateTimeProperty(com.github.nscala_time.time.Imports.richDateTime(dateTime).hour).apply(h1)).minute

80
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
updateTime
3697
3752
112
org.joda.time.DateTime.withZone
Apply
false
0
false
com.github.nscala_time.time.Imports.richDateTimeProperty(com.github.nscala_time.time.Imports.richDateTime(com.github.nscala_time.time.Imports.richDateTimeProperty(com.github.nscala_time.time.Imports.richDateTime(dateTime).hour).apply(h1)).minute).apply(m1).withZone(com.github.nscala_time.time.Imports.DateTimeZone.UTC)

81
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
updateTime
3785
3802
113
com.github.nscala_time.time.RichDateTimeProperty.apply
Apply
false
0
false
com.github.nscala_time.time.Imports.richDateTimeProperty(com.github.nscala_time.time.Imports.richDateTime(dateTime).hour).apply(h2)

82
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
updateTime
3785
3809
113
com.github.nscala_time.time.RichDateTime.minute
Select
false
0
false
com.github.nscala_time.time.Imports.richDateTime(com.github.nscala_time.time.Imports.richDateTimeProperty(com.github.nscala_time.time.Imports.richDateTime(dateTime).hour).apply(h2)).minute

83
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
updateTime
3785
3840
113
org.joda.time.DateTime.withZone
Apply
false
0
false
com.github.nscala_time.time.Imports.richDateTimeProperty(com.github.nscala_time.time.Imports.richDateTime(com.github.nscala_time.time.Imports.richDateTimeProperty(com.github.nscala_time.time.Imports.richDateTime(dateTime).hour).apply(h2)).minute).apply(m2).withZone(com.github.nscala_time.time.Imports.DateTimeZone.UTC)

84
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
updateTime
3857
3879
114
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[org.joda.time.DateTime, org.joda.time.DateTime](dateTime1, dateTime2)

85
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
timeConvert
4012
4036
119
com.github.nscala_time.time.RichDateTimeProperty.apply
Apply
false
0
false
com.github.nscala_time.time.Imports.richDateTimeProperty(com.github.nscala_time.time.Imports.richDateTime(com.github.nscala_time.time.Imports.DateTime.now()).second).apply(0)

86
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
timeConvert
4081
4082
121
<nosymbol>
Literal
false
0
false
1

87
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
timeConvert
4086
4097
121
example.Config.ConfigData.days
Select
false
0
false
config.days

88
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
timeConvert
4144
4166
122
org.joda.time.base.AbstractDateTime.getDayOfWeek
Apply
false
0
false
startDate.getDayOfWeek()

89
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
timeConvert
4200
4234
123
example.Config.getDayTimetable
Apply
false
0
false
Config.this.getDayTimetable(dayOfWeek, config)

90
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
timeConvert
4277
4301
124
example.Config.updateTime
Apply
false
0
false
Config.this.updateTime(x$10, startDate)

91
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
timeConvert
4262
4302
124
scala.collection.immutable.List.map
Apply
false
0
false
lstPeriods.map[(com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime)](((x$10: List[String]) => Config.this.updateTime(x$10, startDate)))

92
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
timeConvert
4331
4352
125
org.joda.time.DateTime.plusDays
Apply
false
0
false
startDate.plusDays(1)

93
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
timeConvert
4071
4387
121
scala.collection.immutable.Range.map
Apply
false
0
false
scala.Predef.intWrapper(1).to(config.days).map[List[(com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime)]](((i: Int) => {
  val dayOfWeek: Int = startDate.getDayOfWeek();
  val lstPeriods: List[List[String]] = Config.this.getDayTimetable(dayOfWeek, config);
  val list: List[(com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime)] = lstPeriods.map[(com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime)](((x$10: List[String]) => Config.this.updateTime(x$10, startDate)));
  startDate = startDate.plusDays(1);
  list
}))

94
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
timeConvert
4410
4410
128
scala.Predef.$conforms
TypeApply
false
0
false
scala.Predef.$conforms[IndexedSeq[List[(com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime)]]]

95
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
timeConvert
4418
4418
128
scala.Predef.$conforms
TypeApply
false
0
false
scala.Predef.$conforms[List[(com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime)]]

96
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
timeConvert
4396
4425
128
scala.collection.StrictOptimizedIterableOps.flatten
ApplyToImplicitArgs
false
0
false
scala.collection.immutable.List.apply[IndexedSeq[List[(com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime)]]](periods).flatten[List[(com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime)]](scala.Predef.$conforms[IndexedSeq[List[(com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime)]]]).flatten[(com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime)](scala.Predef.$conforms[List[(com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime)]])

97
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
configDataToInternal
4518
4533
131
example.Config.ConfigData.city
Select
false
0
false
configData.city

98
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
configDataToInternal
4555
4576
132
example.Config.ConfigData.categories
Select
false
0
false
configData.categories

99
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
configDataToInternal
4593
4616
133
example.Config.timeConvert
Apply
false
0
false
Config.this.timeConvert(configData)

100
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
configDataToInternal
4621
4660
134
example.Config.ConfigInternal.apply
Apply
false
0
false
Config.this.ConfigInternal.apply(city, categories, dates)

101
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
4871
4881
141
example.API.cities
Apply
false
0
false
api.cities()

102
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
4925
4931
142
example.API.City.slug
Select
false
0
false
x$11.slug

103
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
4919
4932
142
scala.collection.immutable.List.map
Apply
false
0
false
v.map[String](((x$11: api.City) => x$11.slug))

104
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
4969
5023
143
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String](configData, "Error when trying access city from API")

105
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5046
5068
145
scala.collection.immutable.List.contains
Apply
false
0
false
cities.contains[String](value)

106
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5101
5101
146
example.Config.ConfigData.copy$default$2
Select
false
0
false
configData.copy$default$2

107
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5101
5101
146
example.Config.ConfigData.copy$default$3
Select
false
0
false
configData.copy$default$3

108
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5101
5101
146
example.Config.ConfigData.copy$default$4
Select
false
0
false
configData.copy$default$4

109
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5101
5101
146
example.Config.ConfigData.copy$default$5
Select
false
0
false
configData.copy$default$5

110
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5101
5101
146
example.Config.ConfigData.copy$default$6
Select
false
0
false
configData.copy$default$6

111
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5101
5101
146
example.Config.ConfigData.copy$default$7
Select
false
0
false
configData.copy$default$7

112
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5101
5101
146
example.Config.ConfigData.copy$default$8
Select
false
0
false
configData.copy$default$8

113
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5101
5101
146
example.Config.ConfigData.copy$default$9
Select
false
0
false
configData.copy$default$9

114
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5101
5101
146
example.Config.ConfigData.copy$default$10
Select
false
0
false
configData.copy$default$10

115
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5090
5119
146
example.Config.ConfigData.copy
Apply
false
0
false
configData.copy(value, configData.copy$default$2, configData.copy$default$3, configData.copy$default$4, configData.copy$default$5, configData.copy$default$6, configData.copy$default$7, configData.copy$default$8, configData.copy$default$9, configData.copy$default$10)

116
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5121
5123
146
<nosymbol>
Literal
false
0
false
""

117
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5089
5124
146
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String](configData.copy(value, configData.copy$default$2, configData.copy$default$3, configData.copy$default$4, configData.copy$default$5, configData.copy$default$6, configData.copy$default$7, configData.copy$default$8, configData.copy$default$9, configData.copy$default$10), "")

118
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5082
5124
146
example.Config.interactiveSet
Return
true
0
false
return scala.Tuple2.apply[example.Config.ConfigData, String](configData.copy(value, configData.copy$default$2, configData.copy$default$3, configData.copy$default$4, configData.copy$default$5, configData.copy$default$6, configData.copy$default$7, configData.copy$default$8, configData.copy$default$9, configData.copy$default$10), "")

119
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5172
5212
148
scala.collection.StringOps.++
Apply
false
0
false
scala.Predef.augmentString(value).++(" is not in the list of cities")

120
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5159
5213
148
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String](configData, scala.Predef.augmentString(value).++(" is not in the list of cities"))

121
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5152
5213
148
example.Config.interactiveSet
Return
true
0
false
return scala.Tuple2.apply[example.Config.ConfigData, String](configData, scala.Predef.augmentString(value).++(" is not in the list of cities"))

122
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5267
5278
152
scala.collection.StringOps.toInt
Select
false
0
false
scala.Predef.augmentString(value).toInt

123
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5263
5279
152
scala.util.Try.apply
Apply
false
0
false
scala.util.Try.apply[Int](scala.Predef.augmentString(value).toInt)

124
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5335
5340
154
scala.Int.>
Apply
false
0
false
v.>(0)

125
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5377
5377
155
example.Config.ConfigData.copy$default$1
Select
false
0
false
configData.copy$default$1

126
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5377
5377
155
example.Config.ConfigData.copy$default$2
Select
false
0
false
configData.copy$default$2

127
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5377
5377
155
example.Config.ConfigData.copy$default$3
Select
false
0
false
configData.copy$default$3

128
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5377
5377
155
example.Config.ConfigData.copy$default$4
Select
false
0
false
configData.copy$default$4

129
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5377
5377
155
example.Config.ConfigData.copy$default$5
Select
false
0
false
configData.copy$default$5

130
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5377
5377
155
example.Config.ConfigData.copy$default$6
Select
false
0
false
configData.copy$default$6

131
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5377
5377
155
example.Config.ConfigData.copy$default$7
Select
false
0
false
configData.copy$default$7

132
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5377
5377
155
example.Config.ConfigData.copy$default$8
Select
false
0
false
configData.copy$default$8

133
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5377
5377
155
example.Config.ConfigData.copy$default$9
Select
false
0
false
configData.copy$default$9

134
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5366
5391
155
example.Config.ConfigData.copy
Apply
false
0
false
configData.copy(x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$1)

135
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5393
5395
155
<nosymbol>
Literal
false
0
false
""

136
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5365
5396
155
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String]({
  <artifact> val x$1: Int = v;
  <artifact> val x$2: String = configData.copy$default$1;
  <artifact> val x$3: List[String] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$2;
  <artifact> val x$4: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$3;
  <artifact> val x$5: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$4;
  <artifact> val x$6: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$5;
  <artifact> val x$7: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$6;
  <artifact> val x$8: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$7;
  <artifact> val x$9: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$8;
  <artifact> val x$10: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$9;
  configData.copy(x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$1)
}, "")

137
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5358
5396
155
example.Config.interactiveSet
Return
true
0
false
return scala.Tuple2.apply[example.Config.ConfigData, String]({
  <artifact> val x$1: Int = v;
  <artifact> val x$2: String = configData.copy$default$1;
  <artifact> val x$3: List[String] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$2;
  <artifact> val x$4: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$3;
  <artifact> val x$5: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$4;
  <artifact> val x$6: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$5;
  <artifact> val x$7: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$6;
  <artifact> val x$8: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$7;
  <artifact> val x$9: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$8;
  <artifact> val x$10: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$9;
  configData.copy(x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$1)
}, "")

138
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5439
5493
157
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String](configData, "Error, days is lower than 0 or equal 0")

139
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5432
5493
157
example.Config.interactiveSet
Return
true
0
false
return scala.Tuple2.apply[example.Config.ConfigData, String](configData, "Error, days is lower than 0 or equal 0")

140
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5605
5605
163
io.circe.Decoder.decodeString
Select
false
0
false
circe.this.Decoder.decodeString

141
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5605
5605
163
io.circe.Decoder.decodeList
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)

142
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5585
5612
163
io.circe.Parser.decode
ApplyToImplicitArgs
false
0
false
io.circe.parser.`package`.decode[List[String]](value)(circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString))

143
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5616
5621
163
example.Utils.toTry
Apply
false
0
false
Utils.toTry[List[String]](either)

144
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5585
5621
163
scalaz.syntax.IdOps.|>
Apply
false
0
false
scalaz.Scalaz.ToIdOps[Either[io.circe.Error,List[String]]](io.circe.parser.`package`.decode[List[String]](value)(circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString))).|>[scala.util.Try[List[String]]](((either: Either[io.circe.Error,List[String]]) => Utils.toTry[List[String]](either)))

145
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5679
5733
166
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String](configData, "Error when trying to decode categories")

146
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5797
5811
168
example.API.categories
Apply
false
0
false
api.categories()

147
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5859
5865
169
example.API.Category.slug
Select
false
0
false
x$12.slug

148
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5853
5866
169
scala.collection.immutable.List.map
Apply
false
0
false
v.map[String](((x$12: api.Category) => x$12.slug))

149
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5907
5967
170
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String](configData, "Error when trying access categories from API")

150
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6010
6032
172
scala.collection.immutable.List.contains
Apply
false
0
false
categories.contains[String](x$13)

151
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
5998
6033
172
scala.collection.immutable.List.forall
Apply
false
0
false
catV.forall(((x$13: String) => categories.contains[String](x$13)))

152
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6070
6070
173
example.Config.ConfigData.copy$default$1
Select
false
0
false
configData.copy$default$1

153
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6070
6070
173
example.Config.ConfigData.copy$default$3
Select
false
0
false
configData.copy$default$3

154
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6070
6070
173
example.Config.ConfigData.copy$default$4
Select
false
0
false
configData.copy$default$4

155
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6070
6070
173
example.Config.ConfigData.copy$default$5
Select
false
0
false
configData.copy$default$5

156
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6070
6070
173
example.Config.ConfigData.copy$default$6
Select
false
0
false
configData.copy$default$6

157
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6070
6070
173
example.Config.ConfigData.copy$default$7
Select
false
0
false
configData.copy$default$7

158
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6070
6070
173
example.Config.ConfigData.copy$default$8
Select
false
0
false
configData.copy$default$8

159
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6070
6070
173
example.Config.ConfigData.copy$default$9
Select
false
0
false
configData.copy$default$9

160
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6070
6070
173
example.Config.ConfigData.copy$default$10
Select
false
0
false
configData.copy$default$10

161
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6059
6093
173
example.Config.ConfigData.copy
Apply
false
0
false
configData.copy(x$12, x$11, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20)

162
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6095
6097
173
<nosymbol>
Literal
false
0
false
""

163
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6058
6098
173
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String]({
  <artifact> val x$11: List[String] @scala.reflect.internal.annotations.uncheckedBounds = catV;
  <artifact> val x$12: String = configData.copy$default$1;
  <artifact> val x$13: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$3;
  <artifact> val x$14: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$4;
  <artifact> val x$15: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$5;
  <artifact> val x$16: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$6;
  <artifact> val x$17: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$7;
  <artifact> val x$18: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$8;
  <artifact> val x$19: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$9;
  <artifact> val x$20: Int = configData.copy$default$10;
  configData.copy(x$12, x$11, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20)
}, "")

164
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6051
6098
173
example.Config.interactiveSet
Return
true
0
false
return scala.Tuple2.apply[example.Config.ConfigData, String]({
  <artifact> val x$11: List[String] @scala.reflect.internal.annotations.uncheckedBounds = catV;
  <artifact> val x$12: String = configData.copy$default$1;
  <artifact> val x$13: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$3;
  <artifact> val x$14: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$4;
  <artifact> val x$15: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$5;
  <artifact> val x$16: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$6;
  <artifact> val x$17: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$7;
  <artifact> val x$18: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$8;
  <artifact> val x$19: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$9;
  <artifact> val x$20: Int = configData.copy$default$10;
  configData.copy(x$12, x$11, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20)
}, "")

165
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6154
6206
175
scala.collection.StringOps.++
Apply
false
0
false
scala.Predef.augmentString(catV.toString()).++(" is not in the list of categories")

166
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6141
6207
175
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String](configData, scala.Predef.augmentString(catV.toString()).++(" is not in the list of categories"))

167
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6134
6207
175
example.Config.interactiveSet
Return
true
0
false
return scala.Tuple2.apply[example.Config.ConfigData, String](configData, scala.Predef.augmentString(catV.toString()).++(" is not in the list of categories"))

168
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6319
6319
181
io.circe.Decoder.decodeString
Select
false
0
false
circe.this.Decoder.decodeString

169
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6319
6319
181
io.circe.Decoder.decodeList
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)

170
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6319
6319
181
io.circe.Decoder.decodeList
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString))

171
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6293
6326
181
io.circe.Parser.decode
ApplyToImplicitArgs
false
0
false
io.circe.parser.`package`.decode[List[List[String]]](value)(circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)))

172
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6330
6335
181
example.Utils.toTry
Apply
false
0
false
Utils.toTry[List[List[String]]](either)

173
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6293
6335
181
scalaz.syntax.IdOps.|>
Apply
false
0
false
scalaz.Scalaz.ToIdOps[Either[io.circe.Error,List[List[String]]]](io.circe.parser.`package`.decode[List[List[String]]](value)(circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)))).|>[scala.util.Try[List[List[String]]]](((either: Either[io.circe.Error,List[List[String]]]) => Utils.toTry[List[List[String]]](either)))

174
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6405
6405
183
example.Config.ConfigData.copy$default$1
Select
false
0
false
configData.copy$default$1

175
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6405
6405
183
example.Config.ConfigData.copy$default$2
Select
false
0
false
configData.copy$default$2

176
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6405
6405
183
example.Config.ConfigData.copy$default$4
Select
false
0
false
configData.copy$default$4

177
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6405
6405
183
example.Config.ConfigData.copy$default$5
Select
false
0
false
configData.copy$default$5

178
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6405
6405
183
example.Config.ConfigData.copy$default$6
Select
false
0
false
configData.copy$default$6

179
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6405
6405
183
example.Config.ConfigData.copy$default$7
Select
false
0
false
configData.copy$default$7

180
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6405
6405
183
example.Config.ConfigData.copy$default$8
Select
false
0
false
configData.copy$default$8

181
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6405
6405
183
example.Config.ConfigData.copy$default$9
Select
false
0
false
configData.copy$default$9

182
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6405
6405
183
example.Config.ConfigData.copy$default$10
Select
false
0
false
configData.copy$default$10

183
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6394
6418
183
example.Config.ConfigData.copy
Apply
false
0
false
configData.copy(x$22, x$23, x$21, x$24, x$25, x$26, x$27, x$28, x$29, x$30)

184
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6420
6422
183
<nosymbol>
Literal
false
0
false
""

185
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6393
6423
183
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String]({
  <artifact> val x$21: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = v;
  <artifact> val x$22: String = configData.copy$default$1;
  <artifact> val x$23: List[String] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$2;
  <artifact> val x$24: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$4;
  <artifact> val x$25: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$5;
  <artifact> val x$26: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$6;
  <artifact> val x$27: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$7;
  <artifact> val x$28: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$8;
  <artifact> val x$29: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$9;
  <artifact> val x$30: Int = configData.copy$default$10;
  configData.copy(x$22, x$23, x$21, x$24, x$25, x$26, x$27, x$28, x$29, x$30)
}, "")

186
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6460
6508
184
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String](configData, "Error when trying to decode time")

187
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6594
6594
188
io.circe.Decoder.decodeString
Select
false
0
false
circe.this.Decoder.decodeString

188
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6594
6594
188
io.circe.Decoder.decodeList
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)

189
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6594
6594
188
io.circe.Decoder.decodeList
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString))

190
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6568
6601
188
io.circe.Parser.decode
ApplyToImplicitArgs
false
0
false
io.circe.parser.`package`.decode[List[List[String]]](value)(circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)))

191
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6605
6610
188
example.Utils.toTry
Apply
false
0
false
Utils.toTry[List[List[String]]](either)

192
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6568
6610
188
scalaz.syntax.IdOps.|>
Apply
false
0
false
scalaz.Scalaz.ToIdOps[Either[io.circe.Error,List[List[String]]]](io.circe.parser.`package`.decode[List[List[String]]](value)(circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)))).|>[scala.util.Try[List[List[String]]]](((either: Either[io.circe.Error,List[List[String]]]) => Utils.toTry[List[List[String]]](either)))

193
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6680
6680
190
example.Config.ConfigData.copy$default$1
Select
false
0
false
configData.copy$default$1

194
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6680
6680
190
example.Config.ConfigData.copy$default$2
Select
false
0
false
configData.copy$default$2

195
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6680
6680
190
example.Config.ConfigData.copy$default$3
Select
false
0
false
configData.copy$default$3

196
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6680
6680
190
example.Config.ConfigData.copy$default$5
Select
false
0
false
configData.copy$default$5

197
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6680
6680
190
example.Config.ConfigData.copy$default$6
Select
false
0
false
configData.copy$default$6

198
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6680
6680
190
example.Config.ConfigData.copy$default$7
Select
false
0
false
configData.copy$default$7

199
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6680
6680
190
example.Config.ConfigData.copy$default$8
Select
false
0
false
configData.copy$default$8

200
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6680
6680
190
example.Config.ConfigData.copy$default$9
Select
false
0
false
configData.copy$default$9

201
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6680
6680
190
example.Config.ConfigData.copy$default$10
Select
false
0
false
configData.copy$default$10

202
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6669
6693
190
example.Config.ConfigData.copy
Apply
false
0
false
configData.copy(x$32, x$33, x$34, x$31, x$35, x$36, x$37, x$38, x$39, x$40)

203
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6695
6697
190
<nosymbol>
Literal
false
0
false
""

204
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6668
6698
190
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String]({
  <artifact> val x$31: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = v;
  <artifact> val x$32: String = configData.copy$default$1;
  <artifact> val x$33: List[String] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$2;
  <artifact> val x$34: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$3;
  <artifact> val x$35: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$5;
  <artifact> val x$36: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$6;
  <artifact> val x$37: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$7;
  <artifact> val x$38: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$8;
  <artifact> val x$39: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$9;
  <artifact> val x$40: Int = configData.copy$default$10;
  configData.copy(x$32, x$33, x$34, x$31, x$35, x$36, x$37, x$38, x$39, x$40)
}, "")

205
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6735
6783
191
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String](configData, "Error when trying to decode time")

206
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6869
6869
195
io.circe.Decoder.decodeString
Select
false
0
false
circe.this.Decoder.decodeString

207
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6869
6869
195
io.circe.Decoder.decodeList
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)

208
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6869
6869
195
io.circe.Decoder.decodeList
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString))

209
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6843
6876
195
io.circe.Parser.decode
ApplyToImplicitArgs
false
0
false
io.circe.parser.`package`.decode[List[List[String]]](value)(circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)))

210
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6880
6885
195
example.Utils.toTry
Apply
false
0
false
Utils.toTry[List[List[String]]](either)

211
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6843
6885
195
scalaz.syntax.IdOps.|>
Apply
false
0
false
scalaz.Scalaz.ToIdOps[Either[io.circe.Error,List[List[String]]]](io.circe.parser.`package`.decode[List[List[String]]](value)(circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)))).|>[scala.util.Try[List[List[String]]]](((either: Either[io.circe.Error,List[List[String]]]) => Utils.toTry[List[List[String]]](either)))

212
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6955
6955
197
example.Config.ConfigData.copy$default$1
Select
false
0
false
configData.copy$default$1

213
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6955
6955
197
example.Config.ConfigData.copy$default$2
Select
false
0
false
configData.copy$default$2

214
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6955
6955
197
example.Config.ConfigData.copy$default$3
Select
false
0
false
configData.copy$default$3

215
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6955
6955
197
example.Config.ConfigData.copy$default$4
Select
false
0
false
configData.copy$default$4

216
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6955
6955
197
example.Config.ConfigData.copy$default$6
Select
false
0
false
configData.copy$default$6

217
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6955
6955
197
example.Config.ConfigData.copy$default$7
Select
false
0
false
configData.copy$default$7

218
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6955
6955
197
example.Config.ConfigData.copy$default$8
Select
false
0
false
configData.copy$default$8

219
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6955
6955
197
example.Config.ConfigData.copy$default$9
Select
false
0
false
configData.copy$default$9

220
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6955
6955
197
example.Config.ConfigData.copy$default$10
Select
false
0
false
configData.copy$default$10

221
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6944
6968
197
example.Config.ConfigData.copy
Apply
false
0
false
configData.copy(x$42, x$43, x$44, x$45, x$41, x$46, x$47, x$48, x$49, x$50)

222
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6970
6972
197
<nosymbol>
Literal
false
0
false
""

223
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
6943
6973
197
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String]({
  <artifact> val x$41: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = v;
  <artifact> val x$42: String = configData.copy$default$1;
  <artifact> val x$43: List[String] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$2;
  <artifact> val x$44: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$3;
  <artifact> val x$45: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$4;
  <artifact> val x$46: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$6;
  <artifact> val x$47: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$7;
  <artifact> val x$48: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$8;
  <artifact> val x$49: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$9;
  <artifact> val x$50: Int = configData.copy$default$10;
  configData.copy(x$42, x$43, x$44, x$45, x$41, x$46, x$47, x$48, x$49, x$50)
}, "")

224
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7010
7058
198
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String](configData, "Error when trying to decode time")

225
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7144
7144
202
io.circe.Decoder.decodeString
Select
false
0
false
circe.this.Decoder.decodeString

226
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7144
7144
202
io.circe.Decoder.decodeList
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)

227
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7144
7144
202
io.circe.Decoder.decodeList
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString))

228
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7118
7151
202
io.circe.Parser.decode
ApplyToImplicitArgs
false
0
false
io.circe.parser.`package`.decode[List[List[String]]](value)(circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)))

229
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7155
7160
202
example.Utils.toTry
Apply
false
0
false
Utils.toTry[List[List[String]]](either)

230
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7118
7160
202
scalaz.syntax.IdOps.|>
Apply
false
0
false
scalaz.Scalaz.ToIdOps[Either[io.circe.Error,List[List[String]]]](io.circe.parser.`package`.decode[List[List[String]]](value)(circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)))).|>[scala.util.Try[List[List[String]]]](((either: Either[io.circe.Error,List[List[String]]]) => Utils.toTry[List[List[String]]](either)))

231
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7230
7230
204
example.Config.ConfigData.copy$default$1
Select
false
0
false
configData.copy$default$1

232
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7230
7230
204
example.Config.ConfigData.copy$default$2
Select
false
0
false
configData.copy$default$2

233
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7230
7230
204
example.Config.ConfigData.copy$default$3
Select
false
0
false
configData.copy$default$3

234
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7230
7230
204
example.Config.ConfigData.copy$default$4
Select
false
0
false
configData.copy$default$4

235
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7230
7230
204
example.Config.ConfigData.copy$default$5
Select
false
0
false
configData.copy$default$5

236
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7230
7230
204
example.Config.ConfigData.copy$default$7
Select
false
0
false
configData.copy$default$7

237
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7230
7230
204
example.Config.ConfigData.copy$default$8
Select
false
0
false
configData.copy$default$8

238
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7230
7230
204
example.Config.ConfigData.copy$default$9
Select
false
0
false
configData.copy$default$9

239
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7230
7230
204
example.Config.ConfigData.copy$default$10
Select
false
0
false
configData.copy$default$10

240
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7219
7243
204
example.Config.ConfigData.copy
Apply
false
0
false
configData.copy(x$52, x$53, x$54, x$55, x$56, x$51, x$57, x$58, x$59, x$60)

241
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7245
7247
204
<nosymbol>
Literal
false
0
false
""

242
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7218
7248
204
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String]({
  <artifact> val x$51: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = v;
  <artifact> val x$52: String = configData.copy$default$1;
  <artifact> val x$53: List[String] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$2;
  <artifact> val x$54: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$3;
  <artifact> val x$55: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$4;
  <artifact> val x$56: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$5;
  <artifact> val x$57: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$7;
  <artifact> val x$58: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$8;
  <artifact> val x$59: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$9;
  <artifact> val x$60: Int = configData.copy$default$10;
  configData.copy(x$52, x$53, x$54, x$55, x$56, x$51, x$57, x$58, x$59, x$60)
}, "")

243
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7285
7333
205
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String](configData, "Error when trying to decode time")

244
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7419
7419
209
io.circe.Decoder.decodeString
Select
false
0
false
circe.this.Decoder.decodeString

245
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7419
7419
209
io.circe.Decoder.decodeList
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)

246
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7419
7419
209
io.circe.Decoder.decodeList
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString))

247
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7393
7426
209
io.circe.Parser.decode
ApplyToImplicitArgs
false
0
false
io.circe.parser.`package`.decode[List[List[String]]](value)(circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)))

248
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7430
7435
209
example.Utils.toTry
Apply
false
0
false
Utils.toTry[List[List[String]]](either)

249
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7393
7435
209
scalaz.syntax.IdOps.|>
Apply
false
0
false
scalaz.Scalaz.ToIdOps[Either[io.circe.Error,List[List[String]]]](io.circe.parser.`package`.decode[List[List[String]]](value)(circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)))).|>[scala.util.Try[List[List[String]]]](((either: Either[io.circe.Error,List[List[String]]]) => Utils.toTry[List[List[String]]](either)))

250
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7505
7505
211
example.Config.ConfigData.copy$default$1
Select
false
0
false
configData.copy$default$1

251
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7505
7505
211
example.Config.ConfigData.copy$default$2
Select
false
0
false
configData.copy$default$2

252
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7505
7505
211
example.Config.ConfigData.copy$default$3
Select
false
0
false
configData.copy$default$3

253
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7505
7505
211
example.Config.ConfigData.copy$default$4
Select
false
0
false
configData.copy$default$4

254
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7505
7505
211
example.Config.ConfigData.copy$default$5
Select
false
0
false
configData.copy$default$5

255
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7505
7505
211
example.Config.ConfigData.copy$default$6
Select
false
0
false
configData.copy$default$6

256
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7505
7505
211
example.Config.ConfigData.copy$default$8
Select
false
0
false
configData.copy$default$8

257
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7505
7505
211
example.Config.ConfigData.copy$default$9
Select
false
0
false
configData.copy$default$9

258
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7505
7505
211
example.Config.ConfigData.copy$default$10
Select
false
0
false
configData.copy$default$10

259
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7494
7518
211
example.Config.ConfigData.copy
Apply
false
0
false
configData.copy(x$62, x$63, x$64, x$65, x$66, x$67, x$61, x$68, x$69, x$70)

260
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7520
7522
211
<nosymbol>
Literal
false
0
false
""

261
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7493
7523
211
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String]({
  <artifact> val x$61: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = v;
  <artifact> val x$62: String = configData.copy$default$1;
  <artifact> val x$63: List[String] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$2;
  <artifact> val x$64: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$3;
  <artifact> val x$65: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$4;
  <artifact> val x$66: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$5;
  <artifact> val x$67: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$6;
  <artifact> val x$68: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$8;
  <artifact> val x$69: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$9;
  <artifact> val x$70: Int = configData.copy$default$10;
  configData.copy(x$62, x$63, x$64, x$65, x$66, x$67, x$61, x$68, x$69, x$70)
}, "")

262
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7560
7608
212
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String](configData, "Error when trying to decode time")

263
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7694
7694
216
io.circe.Decoder.decodeString
Select
false
0
false
circe.this.Decoder.decodeString

264
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7694
7694
216
io.circe.Decoder.decodeList
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)

265
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7694
7694
216
io.circe.Decoder.decodeList
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString))

266
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7668
7701
216
io.circe.Parser.decode
ApplyToImplicitArgs
false
0
false
io.circe.parser.`package`.decode[List[List[String]]](value)(circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)))

267
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7705
7710
216
example.Utils.toTry
Apply
false
0
false
Utils.toTry[List[List[String]]](either)

268
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7668
7710
216
scalaz.syntax.IdOps.|>
Apply
false
0
false
scalaz.Scalaz.ToIdOps[Either[io.circe.Error,List[List[String]]]](io.circe.parser.`package`.decode[List[List[String]]](value)(circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)))).|>[scala.util.Try[List[List[String]]]](((either: Either[io.circe.Error,List[List[String]]]) => Utils.toTry[List[List[String]]](either)))

269
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7780
7780
218
example.Config.ConfigData.copy$default$1
Select
false
0
false
configData.copy$default$1

270
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7780
7780
218
example.Config.ConfigData.copy$default$2
Select
false
0
false
configData.copy$default$2

271
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7780
7780
218
example.Config.ConfigData.copy$default$3
Select
false
0
false
configData.copy$default$3

272
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7780
7780
218
example.Config.ConfigData.copy$default$4
Select
false
0
false
configData.copy$default$4

273
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7780
7780
218
example.Config.ConfigData.copy$default$5
Select
false
0
false
configData.copy$default$5

274
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7780
7780
218
example.Config.ConfigData.copy$default$6
Select
false
0
false
configData.copy$default$6

275
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7780
7780
218
example.Config.ConfigData.copy$default$7
Select
false
0
false
configData.copy$default$7

276
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7780
7780
218
example.Config.ConfigData.copy$default$9
Select
false
0
false
configData.copy$default$9

277
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7780
7780
218
example.Config.ConfigData.copy$default$10
Select
false
0
false
configData.copy$default$10

278
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7769
7793
218
example.Config.ConfigData.copy
Apply
false
0
false
configData.copy(x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$71, x$79, x$80)

279
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7795
7797
218
<nosymbol>
Literal
false
0
false
""

280
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7768
7798
218
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String]({
  <artifact> val x$71: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = v;
  <artifact> val x$72: String = configData.copy$default$1;
  <artifact> val x$73: List[String] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$2;
  <artifact> val x$74: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$3;
  <artifact> val x$75: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$4;
  <artifact> val x$76: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$5;
  <artifact> val x$77: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$6;
  <artifact> val x$78: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$7;
  <artifact> val x$79: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$9;
  <artifact> val x$80: Int = configData.copy$default$10;
  configData.copy(x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$71, x$79, x$80)
}, "")

281
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7835
7883
219
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String](configData, "Error when trying to decode time")

282
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7969
7969
223
io.circe.Decoder.decodeString
Select
false
0
false
circe.this.Decoder.decodeString

283
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7969
7969
223
io.circe.Decoder.decodeList
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)

284
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7969
7969
223
io.circe.Decoder.decodeList
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString))

285
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7943
7976
223
io.circe.Parser.decode
ApplyToImplicitArgs
false
0
false
io.circe.parser.`package`.decode[List[List[String]]](value)(circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)))

286
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7980
7985
223
example.Utils.toTry
Apply
false
0
false
Utils.toTry[List[List[String]]](either)

287
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
7943
7985
223
scalaz.syntax.IdOps.|>
Apply
false
0
false
scalaz.Scalaz.ToIdOps[Either[io.circe.Error,List[List[String]]]](io.circe.parser.`package`.decode[List[List[String]]](value)(circe.this.Decoder.decodeList[List[String]](circe.this.Decoder.decodeList[String](circe.this.Decoder.decodeString)))).|>[scala.util.Try[List[List[String]]]](((either: Either[io.circe.Error,List[List[String]]]) => Utils.toTry[List[List[String]]](either)))

288
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
8055
8055
225
example.Config.ConfigData.copy$default$1
Select
false
0
false
configData.copy$default$1

289
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
8055
8055
225
example.Config.ConfigData.copy$default$2
Select
false
0
false
configData.copy$default$2

290
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
8055
8055
225
example.Config.ConfigData.copy$default$3
Select
false
0
false
configData.copy$default$3

291
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
8055
8055
225
example.Config.ConfigData.copy$default$4
Select
false
0
false
configData.copy$default$4

292
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
8055
8055
225
example.Config.ConfigData.copy$default$5
Select
false
0
false
configData.copy$default$5

293
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
8055
8055
225
example.Config.ConfigData.copy$default$6
Select
false
0
false
configData.copy$default$6

294
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
8055
8055
225
example.Config.ConfigData.copy$default$7
Select
false
0
false
configData.copy$default$7

295
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
8055
8055
225
example.Config.ConfigData.copy$default$8
Select
false
0
false
configData.copy$default$8

296
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
8055
8055
225
example.Config.ConfigData.copy$default$10
Select
false
0
false
configData.copy$default$10

297
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
8044
8068
225
example.Config.ConfigData.copy
Apply
false
0
false
configData.copy(x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$81, x$90)

298
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
8070
8072
225
<nosymbol>
Literal
false
0
false
""

299
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
8043
8073
225
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String]({
  <artifact> val x$81: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = v;
  <artifact> val x$82: String = configData.copy$default$1;
  <artifact> val x$83: List[String] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$2;
  <artifact> val x$84: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$3;
  <artifact> val x$85: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$4;
  <artifact> val x$86: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$5;
  <artifact> val x$87: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$6;
  <artifact> val x$88: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$7;
  <artifact> val x$89: List[List[String]] @scala.reflect.internal.annotations.uncheckedBounds = configData.copy$default$8;
  <artifact> val x$90: Int = configData.copy$default$10;
  configData.copy(x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$81, x$90)
}, "")

300
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
8110
8158
226
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String](configData, "Error when trying to decode time")

301
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Config
Object
example.Config
interactiveSet
8189
8205
230
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[example.Config.ConfigData, String](configData, "")

302
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTryList
8348
8357
241
scala.Predef.println
Apply
false
0
false
scala.Predef.println()

303
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTryList
8388
8401
243
scala.Predef.println
Apply
false
0
false
scala.Predef.println(elem)

304
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTryList
8362
8401
242
scala.collection.immutable.List.foreach
Apply
false
0
false
list.foreach[Unit](((elem: A) => scala.Predef.println(elem)))

305
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTryList
8412
8421
245
scala.util.Try.apply
Apply
false
0
false
scala.util.Try.apply[List[A]](list)

306
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTryCities
8492
8501
248
scala.Predef.println
Apply
false
0
false
scala.Predef.println()

307
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTryCities
8543
8552
250
example.API.City.slug
Select
false
0
false
city.slug

308
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTryCities
8570
8579
251
example.API.City.name
Select
false
0
false
city.name

309
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTryCities
8586
8616
252
scala.Predef.println
Apply
false
0
false
scala.Predef.println(("\t- ".+(name).+(" - ").+(slug).+(" "): String))

310
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTryCities
8506
8622
249
scala.collection.immutable.List.foreach
Apply
false
0
false
list.foreach[Unit](((city: example.API.City) => {
  val slug: String = city.slug;
  val name: String = city.name;
  scala.Predef.println(("\t- ".+(name).+(" - ").+(slug).+(" "): String))
}))

311
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTryCities
8627
8636
254
scala.util.Try.apply
Apply
false
0
false
scala.util.Try.apply[List[example.API.City]](list)

312
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTryCategories
8720
8729
258
scala.Predef.println
Apply
false
0
false
scala.Predef.println()

313
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTryCategories
8770
8778
260
example.API.Category.slug
Select
false
0
false
cat.slug

314
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTryCategories
8796
8804
261
example.API.Category.name
Select
false
0
false
cat.name

315
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTryCategories
8811
8841
262
scala.Predef.println
Apply
false
0
false
scala.Predef.println(("\t- ".+(name).+(" - ").+(slug).+(" "): String))

316
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTryCategories
8734
8847
259
scala.collection.immutable.List.foreach
Apply
false
0
false
list.foreach[Unit](((cat: example.API.Category) => {
  val slug: String = cat.slug;
  val name: String = cat.name;
  scala.Predef.println(("\t- ".+(name).+(" - ").+(slug).+(" "): String))
}))

317
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTryCategories
8852
8861
264
scala.util.Try.apply
Apply
false
0
false
scala.util.Try.apply[List[example.API.Category]](list)

318
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTry
8911
8920
267
scala.Predef.println
Apply
false
0
false
scala.Predef.println()

319
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTry
8925
8938
268
scala.Predef.println
Apply
false
0
false
scala.Predef.println(elem)

320
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
printTry
8943
8952
269
scala.util.Try.apply
Apply
false
0
false
scala.util.Try.apply[A](elem)

321
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9085
9087
277
<nosymbol>
Literal
false
0
false
""

322
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9088
9094
277
scala.collection.immutable.Nil
Select
false
0
false
scala.collection.immutable.Nil

323
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9095
9101
277
scala.collection.immutable.Nil
Select
false
0
false
scala.collection.immutable.Nil

324
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9102
9108
277
scala.collection.immutable.Nil
Select
false
0
false
scala.collection.immutable.Nil

325
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9109
9115
277
scala.collection.immutable.Nil
Select
false
0
false
scala.collection.immutable.Nil

326
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9116
9122
277
scala.collection.immutable.Nil
Select
false
0
false
scala.collection.immutable.Nil

327
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9123
9129
277
scala.collection.immutable.Nil
Select
false
0
false
scala.collection.immutable.Nil

328
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9130
9136
277
scala.collection.immutable.Nil
Select
false
0
false
scala.collection.immutable.Nil

329
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9137
9143
277
scala.collection.immutable.Nil
Select
false
0
false
scala.collection.immutable.Nil

330
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9144
9145
277
<nosymbol>
Literal
false
0
false
1

331
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9074
9146
277
example.Config.ConfigData.apply
Apply
false
0
false
Config.ConfigData.apply("", scala.collection.immutable.Nil, scala.collection.immutable.Nil, scala.collection.immutable.Nil, scala.collection.immutable.Nil, scala.collection.immutable.Nil, scala.collection.immutable.Nil, scala.collection.immutable.Nil, scala.collection.immutable.Nil, 1)

332
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9157
9161
278
<nosymbol>
Literal
false
0
false
true

333
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9181
9211
279
scala.io.StdIn.readLine
Apply
false
0
false
scala.io.StdIn.readLine(">> ")

334
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9222
9233
280
java.lang.Object.==
Apply
false
0
false
cmd.==(":q")

335
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9252
9254
281
<nosymbol>
Literal
false
0
false
()

336
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9245
9254
281
example.Interface.startPrompt
Return
true
0
false
return ()

337
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9218
9218
280
<nosymbol>
Literal
false
0
false
()

338
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9218
9218
280
<nosymbol>
Block
true
0
false
()

339
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9285
9299
283
java.lang.String.split
Apply
false
0
false
cmd.split(" ")

340
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9322
9342
285
scala.Int.>
Apply
false
0
false
arrayArgs.length.>(1)

341
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9360
9372
286
scala.Array.apply
Apply
false
0
false
arrayArgs.apply(0)

342
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9374
9386
286
scala.Array.apply
Apply
false
0
false
arrayArgs.apply(1)

343
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9388
9437
286
scala.collection.IterableOnceOps.mkString
Apply
false
0
false
scala.Predef.wrapRefArray[String](scala.Predef.refArrayOps[String](arrayArgs).slice(2, arrayArgs.length)).mkString("")

344
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9354
9438
286
scala.Array.apply
ApplyToImplicitArgs
false
0
false
scala.Array.apply[String](arrayArgs.apply(0), arrayArgs.apply(1), scala.Predef.wrapRefArray[String](scala.Predef.refArrayOps[String](arrayArgs).slice(2, arrayArgs.length)).mkString(""))((ClassTag.apply[String](classOf[java.lang.String]): scala.reflect.ClassTag[String]))

345
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9354
9438
286
scala.Array.apply
Block
true
0
false
scala.Array.apply[String](arrayArgs.apply(0), arrayArgs.apply(1), scala.Predef.wrapRefArray[String](scala.Predef.refArrayOps[String](arrayArgs).slice(2, arrayArgs.length)).mkString(""))((ClassTag.apply[String](classOf[java.lang.String]): scala.reflect.ClassTag[String]))

346
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9462
9471
288
example.Interface.arrayArgs
Ident
true
0
false
arrayArgs

347
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9486
9493
290
scala.Array.apply
Apply
false
0
false
args.apply(0)

348
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9540
9542
291
<nosymbol>
Literal
false
0
false
()

349
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9589
9621
292
example.Config.configDataToInternal
Apply
false
0
false
Config.configDataToInternal(configData)

350
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9582
9622
292
example.API.events
Apply
false
0
false
API.events(Config.configDataToInternal(configData))

351
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9574
9623
292
scala.Predef.println
Apply
false
0
false
scala.Predef.println(API.events(Config.configDataToInternal(configData)))

352
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9663
9689
293
example.Config.showConfigData
Apply
false
0
false
Config.showConfigData(configData)

353
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9655
9690
293
scala.Predef.println
Apply
false
0
false
scala.Predef.println(Config.showConfigData(configData))

354
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9736
9762
294
io.circe.Json.toString
Apply
false
0
false
io.circe.syntax.`package`.EncoderOps[example.Config.ConfigData](configData).asJson(circe.this.Encoder.importedEncoder[example.Config.ConfigData]((new io.circe.export.Exported[io.circe.Encoder.AsObject[example.Config.ConfigData]]((shapeless.lazily.apply[io.circe.generic.encoding.DerivedAsObjectEncoder[example.Config.ConfigData]]({
  val inst$macro$26: io.circe.generic.encoding.DerivedAsObjectEncoder[example.Config.ConfigData] = {
    final class anon$importedEncoder$macro$25 extends AnyRef with Serializable {
      def <init>(): anon$importedEncoder$macro$25 = {
        anon$importedEncoder$macro$25.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$1: io.circe.generic.encoding.DerivedAsObjectEncoder[example.Config.ConfigData] = encoding.this.DerivedAsObjectEncoder.deriveEncoder[example.Config.ConfigData, shapeless.labelled.FieldType[Symbol @@ String("city"),String] :: shapeless.labelled.FieldType[Symbol @@ String("categories"),List[String]] :: shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.Config.ConfigData, (Symbol @@ String("city")) :: (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, String :: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("city"),String] :: shapeless.labelled.FieldType[Symbol @@ String("categories"),List[String]] :: shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.Config.ConfigData] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.Config.ConfigData]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("city")) :: (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("city")) :: (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("city"), (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("city").asInstanceOf[Symbol @@ String("city")], shapeless.::.apply[Symbol @@ String("categories"), (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("categories").asInstanceOf[Symbol @@ String("categories")], shapeless.::.apply[Symbol @@ String("mon"), (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("mon").asInstanceOf[Symbol @@ String("mon")], shapeless.::.apply[Symbol @@ String("tue"), (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("tue").asInstanceOf[Symbol @@ String("tue")], shapeless.::.apply[Symbol @@ String("wed"), (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("wed").asInstanceOf[Symbol @@ String("wed")], shapeless.::.apply[Symbol @@ String("thu"), (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("thu").asInstanceOf[Symbol @@ String("thu")], shapeless.::.apply[Symbol @@ String("fri"), (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("fri").asInstanceOf[Symbol @@ String("fri")], shapeless.::.apply[Symbol @@ String("sat"), (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("sat").asInstanceOf[Symbol @@ String("sat")], shapeless.::.apply[Symbol @@ String("sun"), (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("sun").asInstanceOf[Symbol @@ String("sun")], shapeless.::.apply[Symbol @@ String("days"), shapeless.HNil.type](scala.Symbol.apply("days").asInstanceOf[Symbol @@ String("days")], shapeless.HNil))))))))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.Config.ConfigData,(Symbol @@ String("city")) :: (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil]), {
  final class anon$macro$23 extends AnyRef with shapeless.Generic[example.Config.ConfigData] {
    def <init>(): anon$macro$23 = {
      anon$macro$23.super.<init>();
      ()
    };
    type Repr = String :: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil;
    def to(p: example.Config.ConfigData): anon$macro$23.this.Repr = p match {
  case (city: String, categories: List[String], mon: List[List[String]], tue: List[List[String]], wed: List[List[String]], thu: List[List[String]], fri: List[List[String]], sat: List[List[String]], sun: List[List[String]], days: Int)example.Config.ConfigData((pat$macro$13 @ _), (pat$macro$14 @ _), (pat$macro$15 @ _), (pat$macro$16 @ _), (pat$macro$17 @ _), (pat$macro$18 @ _), (pat$macro$19 @ _), (pat$macro$20 @ _), (pat$macro$21 @ _), (pat$macro$22 @ _)) => shapeless.::.apply[String, List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$13, shapeless.::.apply[List[String], List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$14, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$15, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$16, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$17, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$18, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$19, shapeless.::.apply[List[List[String]], List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$20, shapeless.::.apply[List[List[String]], Int :: shapeless.HNil.type](pat$macro$21, shapeless.::.apply[Int, shapeless.HNil.type](pat$macro$22, shapeless.HNil))))))))))
}.asInstanceOf[anon$macro$23.this.Repr];
    def from(p: anon$macro$23.this.Repr): example.Config.ConfigData = p match {
      case (head: String, tail: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)String :: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$13 @ _), (head: List[String], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$14 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$15 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$16 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$17 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$18 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$19 @ _), (head: List[List[String]], tail: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$20 @ _), (head: List[List[String]], tail: Int :: shapeless.HNil)List[List[String]] :: Int :: shapeless.HNil((pat$macro$21 @ _), (head: Int, tail: shapeless.HNil)Int :: shapeless.HNil((pat$macro$22 @ _), shapeless.HNil)))))))))) => example.this.Config.ConfigData.apply(pat$macro$13, pat$macro$14, pat$macro$15, pat$macro$16, pat$macro$17, pat$macro$18, pat$macro$19, pat$macro$20, pat$macro$21, pat$macro$22)
    }
  };
  (new anon$macro$23(): shapeless.Generic.Aux[example.Config.ConfigData,String :: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("city"), String, (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("categories"),List[String]] :: shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("categories"), List[String], (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("mon"), List[List[String]], (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("tue"), List[List[String]], (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("wed"), List[List[String]], (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("thu"), List[List[String]], (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("fri"), List[List[String]], (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("sat"), List[List[String]], (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("sun"), List[List[String]], (Symbol @@ String("days")) :: shapeless.HNil, Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("days"), Int, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("days")]](scala.Symbol.apply("days").asInstanceOf[Symbol @@ String("days")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("days")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("sun")]](scala.Symbol.apply("sun").asInstanceOf[Symbol @@ String("sun")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("sun")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("sat")]](scala.Symbol.apply("sat").asInstanceOf[Symbol @@ String("sat")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("sat")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("fri")]](scala.Symbol.apply("fri").asInstanceOf[Symbol @@ String("fri")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("fri")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("thu")]](scala.Symbol.apply("thu").asInstanceOf[Symbol @@ String("thu")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("thu")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("wed")]](scala.Symbol.apply("wed").asInstanceOf[Symbol @@ String("wed")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("wed")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("tue")]](scala.Symbol.apply("tue").asInstanceOf[Symbol @@ String("tue")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("tue")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("mon")]](scala.Symbol.apply("mon").asInstanceOf[Symbol @@ String("mon")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("mon")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("categories")]](scala.Symbol.apply("categories").asInstanceOf[Symbol @@ String("categories")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("categories")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("city")]](scala.Symbol.apply("city").asInstanceOf[Symbol @@ String("city")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("city")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("city"),String] :: shapeless.labelled.FieldType[Symbol @@ String("categories"),List[String]] :: shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.encoding.ReprAsObjectEncoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]](anon$importedEncoder$macro$25.this.inst$macro$24)).asInstanceOf[io.circe.generic.encoding.DerivedAsObjectEncoder[example.Config.ConfigData]];
      <stable> <accessor> lazy val inst$macro$24: io.circe.generic.encoding.ReprAsObjectEncoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.encoding.ReprAsObjectEncoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.encoding.ReprAsObjectEncoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericEncoderForcity: io.circe.Encoder[String] = circe.this.Encoder.encodeString;
    private[this] val circeGenericEncoderForcategories: io.circe.Encoder.AsArray[List[String]] = circe.this.Encoder.encodeList[String](circe.this.Encoder.encodeString);
    private[this] val circeGenericEncoderForsun: io.circe.Encoder.AsArray[List[List[String]]] = circe.this.Encoder.encodeList[List[String]](circe.this.Encoder.encodeList[String](circe.this.Encoder.encodeString));
    private[this] val circeGenericEncoderFordays: io.circe.Encoder[Int] = circe.this.Encoder.encodeInt;
    final def encodeObject(a: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil): io.circe.JsonObject = a match {
      case (head: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String], tail: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForcity @ _), (head: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForcategories @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingFormon @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingFortue @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForwed @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForthu @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForfri @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForsat @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]], tail: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForsun @ _), (head: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int], tail: shapeless.HNil)Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingFordays @ _), shapeless.HNil)))))))))) => io.circe.JsonObject.fromIterable(scala.collection.immutable.Vector.apply[(String, io.circe.Json)](scala.Tuple2.apply[String, io.circe.Json]("city", $anon.this.circeGenericEncoderForcity.apply(circeGenericHListBindingForcity)), scala.Tuple2.apply[String, io.circe.Json]("categories", $anon.this.circeGenericEncoderForcategories.apply(circeGenericHListBindingForcategories)), scala.Tuple2.apply[String, io.circe.Json]("mon", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingFormon)), scala.Tuple2.apply[String, io.circe.Json]("tue", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingFortue)), scala.Tuple2.apply[String, io.circe.Json]("wed", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingForwed)), scala.Tuple2.apply[String, io.circe.Json]("thu", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingForthu)), scala.Tuple2.apply[String, io.circe.Json]("fri", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingForfri)), scala.Tuple2.apply[String, io.circe.Json]("sat", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingForsat)), scala.Tuple2.apply[String, io.circe.Json]("sun", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingForsun)), scala.Tuple2.apply[String, io.circe.Json]("days", $anon.this.circeGenericEncoderFordays.apply(circeGenericHListBindingFordays))))
    }
  };
  new $anon()
}: io.circe.generic.encoding.ReprAsObjectEncoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]).asInstanceOf[io.circe.generic.encoding.ReprAsObjectEncoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]]
    };
    new anon$importedEncoder$macro$25().inst$macro$1
  };
  shapeless.Lazy.apply[io.circe.generic.encoding.DerivedAsObjectEncoder[example.Config.ConfigData]](inst$macro$26)
}): io.circe.Encoder.AsObject[example.Config.ConfigData])): io.circe.export.Exported[io.circe.Encoder.AsObject[example.Config.ConfigData]]))).toString()

355
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9726
9726
294
example.Config.writeFile$default$2
Select
false
0
false
Interface.this.cnf.writeFile$default$2

356
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9722
9763
294
example.Config.writeFile
Apply
false
0
false
Interface.this.cnf.writeFile(io.circe.syntax.`package`.EncoderOps[example.Config.ConfigData](configData).asJson(circe.this.Encoder.importedEncoder[example.Config.ConfigData]((new io.circe.export.Exported[io.circe.Encoder.AsObject[example.Config.ConfigData]]((shapeless.lazily.apply[io.circe.generic.encoding.DerivedAsObjectEncoder[example.Config.ConfigData]]({
  val inst$macro$26: io.circe.generic.encoding.DerivedAsObjectEncoder[example.Config.ConfigData] = {
    final class anon$importedEncoder$macro$25 extends AnyRef with Serializable {
      def <init>(): anon$importedEncoder$macro$25 = {
        anon$importedEncoder$macro$25.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$1: io.circe.generic.encoding.DerivedAsObjectEncoder[example.Config.ConfigData] = encoding.this.DerivedAsObjectEncoder.deriveEncoder[example.Config.ConfigData, shapeless.labelled.FieldType[Symbol @@ String("city"),String] :: shapeless.labelled.FieldType[Symbol @@ String("categories"),List[String]] :: shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.Config.ConfigData, (Symbol @@ String("city")) :: (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, String :: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("city"),String] :: shapeless.labelled.FieldType[Symbol @@ String("categories"),List[String]] :: shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.Config.ConfigData] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.Config.ConfigData]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("city")) :: (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("city")) :: (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("city"), (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("city").asInstanceOf[Symbol @@ String("city")], shapeless.::.apply[Symbol @@ String("categories"), (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("categories").asInstanceOf[Symbol @@ String("categories")], shapeless.::.apply[Symbol @@ String("mon"), (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("mon").asInstanceOf[Symbol @@ String("mon")], shapeless.::.apply[Symbol @@ String("tue"), (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("tue").asInstanceOf[Symbol @@ String("tue")], shapeless.::.apply[Symbol @@ String("wed"), (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("wed").asInstanceOf[Symbol @@ String("wed")], shapeless.::.apply[Symbol @@ String("thu"), (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("thu").asInstanceOf[Symbol @@ String("thu")], shapeless.::.apply[Symbol @@ String("fri"), (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("fri").asInstanceOf[Symbol @@ String("fri")], shapeless.::.apply[Symbol @@ String("sat"), (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("sat").asInstanceOf[Symbol @@ String("sat")], shapeless.::.apply[Symbol @@ String("sun"), (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("sun").asInstanceOf[Symbol @@ String("sun")], shapeless.::.apply[Symbol @@ String("days"), shapeless.HNil.type](scala.Symbol.apply("days").asInstanceOf[Symbol @@ String("days")], shapeless.HNil))))))))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.Config.ConfigData,(Symbol @@ String("city")) :: (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil]), {
  final class anon$macro$23 extends AnyRef with shapeless.Generic[example.Config.ConfigData] {
    def <init>(): anon$macro$23 = {
      anon$macro$23.super.<init>();
      ()
    };
    type Repr = String :: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil;
    def to(p: example.Config.ConfigData): anon$macro$23.this.Repr = p match {
  case (city: String, categories: List[String], mon: List[List[String]], tue: List[List[String]], wed: List[List[String]], thu: List[List[String]], fri: List[List[String]], sat: List[List[String]], sun: List[List[String]], days: Int)example.Config.ConfigData((pat$macro$13 @ _), (pat$macro$14 @ _), (pat$macro$15 @ _), (pat$macro$16 @ _), (pat$macro$17 @ _), (pat$macro$18 @ _), (pat$macro$19 @ _), (pat$macro$20 @ _), (pat$macro$21 @ _), (pat$macro$22 @ _)) => shapeless.::.apply[String, List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$13, shapeless.::.apply[List[String], List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$14, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$15, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$16, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$17, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$18, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$19, shapeless.::.apply[List[List[String]], List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$20, shapeless.::.apply[List[List[String]], Int :: shapeless.HNil.type](pat$macro$21, shapeless.::.apply[Int, shapeless.HNil.type](pat$macro$22, shapeless.HNil))))))))))
}.asInstanceOf[anon$macro$23.this.Repr];
    def from(p: anon$macro$23.this.Repr): example.Config.ConfigData = p match {
      case (head: String, tail: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)String :: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$13 @ _), (head: List[String], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$14 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$15 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$16 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$17 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$18 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$19 @ _), (head: List[List[String]], tail: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$20 @ _), (head: List[List[String]], tail: Int :: shapeless.HNil)List[List[String]] :: Int :: shapeless.HNil((pat$macro$21 @ _), (head: Int, tail: shapeless.HNil)Int :: shapeless.HNil((pat$macro$22 @ _), shapeless.HNil)))))))))) => example.this.Config.ConfigData.apply(pat$macro$13, pat$macro$14, pat$macro$15, pat$macro$16, pat$macro$17, pat$macro$18, pat$macro$19, pat$macro$20, pat$macro$21, pat$macro$22)
    }
  };
  (new anon$macro$23(): shapeless.Generic.Aux[example.Config.ConfigData,String :: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("city"), String, (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("categories"),List[String]] :: shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("categories"), List[String], (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("mon"), List[List[String]], (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("tue"), List[List[String]], (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("wed"), List[List[String]], (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("thu"), List[List[String]], (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("fri"), List[List[String]], (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("sat"), List[List[String]], (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("sun"), List[List[String]], (Symbol @@ String("days")) :: shapeless.HNil, Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("days"), Int, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("days")]](scala.Symbol.apply("days").asInstanceOf[Symbol @@ String("days")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("days")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("sun")]](scala.Symbol.apply("sun").asInstanceOf[Symbol @@ String("sun")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("sun")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("sat")]](scala.Symbol.apply("sat").asInstanceOf[Symbol @@ String("sat")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("sat")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("fri")]](scala.Symbol.apply("fri").asInstanceOf[Symbol @@ String("fri")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("fri")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("thu")]](scala.Symbol.apply("thu").asInstanceOf[Symbol @@ String("thu")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("thu")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("wed")]](scala.Symbol.apply("wed").asInstanceOf[Symbol @@ String("wed")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("wed")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("tue")]](scala.Symbol.apply("tue").asInstanceOf[Symbol @@ String("tue")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("tue")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("mon")]](scala.Symbol.apply("mon").asInstanceOf[Symbol @@ String("mon")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("mon")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("categories")]](scala.Symbol.apply("categories").asInstanceOf[Symbol @@ String("categories")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("categories")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("city")]](scala.Symbol.apply("city").asInstanceOf[Symbol @@ String("city")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("city")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("city"),String] :: shapeless.labelled.FieldType[Symbol @@ String("categories"),List[String]] :: shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.encoding.ReprAsObjectEncoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]](anon$importedEncoder$macro$25.this.inst$macro$24)).asInstanceOf[io.circe.generic.encoding.DerivedAsObjectEncoder[example.Config.ConfigData]];
      <stable> <accessor> lazy val inst$macro$24: io.circe.generic.encoding.ReprAsObjectEncoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.encoding.ReprAsObjectEncoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.encoding.ReprAsObjectEncoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericEncoderForcity: io.circe.Encoder[String] = circe.this.Encoder.encodeString;
    private[this] val circeGenericEncoderForcategories: io.circe.Encoder.AsArray[List[String]] = circe.this.Encoder.encodeList[String](circe.this.Encoder.encodeString);
    private[this] val circeGenericEncoderForsun: io.circe.Encoder.AsArray[List[List[String]]] = circe.this.Encoder.encodeList[List[String]](circe.this.Encoder.encodeList[String](circe.this.Encoder.encodeString));
    private[this] val circeGenericEncoderFordays: io.circe.Encoder[Int] = circe.this.Encoder.encodeInt;
    final def encodeObject(a: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil): io.circe.JsonObject = a match {
      case (head: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String], tail: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForcity @ _), (head: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForcategories @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingFormon @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingFortue @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForwed @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForthu @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForfri @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForsat @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]], tail: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForsun @ _), (head: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int], tail: shapeless.HNil)Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingFordays @ _), shapeless.HNil)))))))))) => io.circe.JsonObject.fromIterable(scala.collection.immutable.Vector.apply[(String, io.circe.Json)](scala.Tuple2.apply[String, io.circe.Json]("city", $anon.this.circeGenericEncoderForcity.apply(circeGenericHListBindingForcity)), scala.Tuple2.apply[String, io.circe.Json]("categories", $anon.this.circeGenericEncoderForcategories.apply(circeGenericHListBindingForcategories)), scala.Tuple2.apply[String, io.circe.Json]("mon", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingFormon)), scala.Tuple2.apply[String, io.circe.Json]("tue", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingFortue)), scala.Tuple2.apply[String, io.circe.Json]("wed", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingForwed)), scala.Tuple2.apply[String, io.circe.Json]("thu", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingForthu)), scala.Tuple2.apply[String, io.circe.Json]("fri", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingForfri)), scala.Tuple2.apply[String, io.circe.Json]("sat", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingForsat)), scala.Tuple2.apply[String, io.circe.Json]("sun", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingForsun)), scala.Tuple2.apply[String, io.circe.Json]("days", $anon.this.circeGenericEncoderFordays.apply(circeGenericHListBindingFordays))))
    }
  };
  new $anon()
}: io.circe.generic.encoding.ReprAsObjectEncoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]).asInstanceOf[io.circe.generic.encoding.ReprAsObjectEncoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]]
    };
    new anon$importedEncoder$macro$25().inst$macro$1
  };
  shapeless.Lazy.apply[io.circe.generic.encoding.DerivedAsObjectEncoder[example.Config.ConfigData]](inst$macro$26)
}): io.circe.Encoder.AsObject[example.Config.ConfigData])): io.circe.export.Exported[io.circe.Encoder.AsObject[example.Config.ConfigData]]))).toString(), Interface.this.cnf.writeFile$default$2)

357
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9807
9817
296
example.Config.config
Apply
false
0
false
Interface.this.cnf.config()

358
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9882
9908
297
example.Config.showConfigData
Apply
false
0
false
Config.showConfigData(configData)

359
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9874
9909
297
scala.Predef.println
Apply
false
0
false
scala.Predef.println(Config.showConfigData(configData))

360
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9942
9990
298
scala.Predef.println
Apply
false
0
false
scala.Predef.println("Error when trying to read config file")

361
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10066
10084
301
example.Interface.printTryCategories
Apply
false
0
false
Interface.this.printTryCategories(list)

362
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10043
10085
301
scala.util.Try.flatMap
Apply
false
0
false
Interface.this.api.categories().flatMap[List[example.API.Category]](((list: List[example.API.Category]) => Interface.this.printTryCategories(list)))

363
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10135
10149
302
example.Interface.printTryCities
Apply
false
0
false
Interface.this.printTryCities(list)

364
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10116
10150
302
scala.util.Try.flatMap
Apply
false
0
false
Interface.this.api.cities().flatMap[List[example.API.City]](((list: List[example.API.City]) => Interface.this.printTryCities(list)))

365
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10234
10241
304
scala.Array.apply
Apply
false
0
false
args.apply(1)

366
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10243
10250
304
scala.Array.apply
Apply
false
0
false
args.apply(2)

367
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10203
10251
304
example.Config.interactiveSet
Apply
false
0
false
Interface.this.cnf.interactiveSet(configData, args.apply(1), args.apply(2))

368
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10275
10281
305
scala.Tuple2._1
Select
false
0
false
res._1

369
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10296
10308
306
java.lang.Object.==
Apply
false
0
false
res._2.==("")

370
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10332
10358
307
example.Config.showConfigData
Apply
false
0
false
Config.showConfigData(configData)

371
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10324
10359
307
scala.Predef.println
Apply
false
0
false
scala.Predef.println(Config.showConfigData(configData))

372
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10324
10359
307
scala.Predef.println
Block
true
0
false
scala.Predef.println(Config.showConfigData(configData))

373
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10399
10405
309
scala.Tuple2._2
Select
false
0
false
res._2

374
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10391
10406
309
scala.Predef.println
Apply
false
0
false
scala.Predef.println(res._2)

375
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10391
10406
309
scala.Predef.println
Block
true
0
false
scala.Predef.println(res._2)

376
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10471
10568
314
scala.Predef.println
Apply
false
0
false
scala.Predef.println("find                - try to find events with configurated before parameters in config")

377
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10579
10648
315
scala.Predef.println
Apply
false
0
false
scala.Predef.println("printConfig         - print current state of configuration")

378
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10659
10724
316
scala.Predef.println
Apply
false
0
false
scala.Predef.println("importConfig        - load config from config.txt file")

379
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10735
10798
317
scala.Predef.println
Apply
false
0
false
scala.Predef.println("exportConfig        - save config to config.txt file")

380
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10809
10867
318
scala.Predef.println
Apply
false
0
false
scala.Predef.println("categories          - to get list of categories")

381
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10878
10932
319
scala.Predef.println
Apply
false
0
false
scala.Predef.println("cities              - to get list of cities")

382
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
10943
11115
320
scala.Predef.println
Apply
false
0
false
scala.Predef.println("set <field> <value> - set value for config\n  Examples:\n    set mon [[\"12:00\", \"14:00\"]]\n    set city msk\n    set categories [\"theater\"]\n    set days 5")

383
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
11126
11178
321
scala.Predef.println
Apply
false
0
false
scala.Predef.println("help                - to get this message")

384
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
11189
11229
322
scala.Predef.println
Apply
false
0
false
scala.Predef.println(":q                  - to exit")

385
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
11269
11295
324
scala.Predef.println
Apply
false
0
false
scala.Predef.println("Unknown command")

386
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9163
9163
278
example.Interface.while$1
Apply
false
0
false
while$1()

387
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9163
11309
278
<nosymbol>
Block
true
0
false
{
  {
    val cmd: String = scala.io.StdIn.readLine(">> ");
    if (cmd.==(":q"))
      return ()
    else
      ();
    val arrayArgs: Array[String] = cmd.split(" ");
    val args: Array[String] = if (arrayArgs.length.>(1))
      scala.Array.apply[String](arrayArgs.apply(0), arrayArgs.apply(1), scala.Predef.wrapRefArray[String](scala.Predef.refArrayOps[String](arrayArgs).slice(2, arrayArgs.length)).mkString(""))((ClassTag.apply[String](classOf[java.lang.String]): scala.reflect.ClassTag[String]))
    else
      arrayArgs;
    args.apply(0) match {
      case ":q" => return ()
      case "find" => scala.Predef.println(API.events(Config.configDataToInternal(configData)))
      case "printConfig" => scala.Predef.println(Config.showConfigData(configData))
      case "exportConfig" => Interface.this.cnf.writeFile(io.circe.syntax.`package`.EncoderOps[example.Config.ConfigData](configData).asJson(circe.this.Encoder.importedEncoder[example.Config.ConfigData]((new io.circe.export.Exported[io.circe.Encoder.AsObject[example.Config.ConfigData]]((shapeless.lazily.apply[io.circe.generic.encoding.DerivedAsObjectEncoder[example.Config.ConfigData]]({
  val inst$macro$26: io.circe.generic.encoding.DerivedAsObjectEncoder[example.Config.ConfigData] = {
    final class anon$importedEncoder$macro$25 extends AnyRef with Serializable {
      def <init>(): anon$importedEncoder$macro$25 = {
        anon$importedEncoder$macro$25.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$1: io.circe.generic.encoding.DerivedAsObjectEncoder[example.Config.ConfigData] = encoding.this.DerivedAsObjectEncoder.deriveEncoder[example.Config.ConfigData, shapeless.labelled.FieldType[Symbol @@ String("city"),String] :: shapeless.labelled.FieldType[Symbol @@ String("categories"),List[String]] :: shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.Config.ConfigData, (Symbol @@ String("city")) :: (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, String :: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("city"),String] :: shapeless.labelled.FieldType[Symbol @@ String("categories"),List[String]] :: shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.Config.ConfigData] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.Config.ConfigData]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("city")) :: (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("city")) :: (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("city"), (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("city").asInstanceOf[Symbol @@ String("city")], shapeless.::.apply[Symbol @@ String("categories"), (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("categories").asInstanceOf[Symbol @@ String("categories")], shapeless.::.apply[Symbol @@ String("mon"), (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("mon").asInstanceOf[Symbol @@ String("mon")], shapeless.::.apply[Symbol @@ String("tue"), (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("tue").asInstanceOf[Symbol @@ String("tue")], shapeless.::.apply[Symbol @@ String("wed"), (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("wed").asInstanceOf[Symbol @@ String("wed")], shapeless.::.apply[Symbol @@ String("thu"), (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("thu").asInstanceOf[Symbol @@ String("thu")], shapeless.::.apply[Symbol @@ String("fri"), (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("fri").asInstanceOf[Symbol @@ String("fri")], shapeless.::.apply[Symbol @@ String("sat"), (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("sat").asInstanceOf[Symbol @@ String("sat")], shapeless.::.apply[Symbol @@ String("sun"), (Symbol @@ String("days")) :: shapeless.HNil.type](scala.Symbol.apply("sun").asInstanceOf[Symbol @@ String("sun")], shapeless.::.apply[Symbol @@ String("days"), shapeless.HNil.type](scala.Symbol.apply("days").asInstanceOf[Symbol @@ String("days")], shapeless.HNil))))))))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.Config.ConfigData,(Symbol @@ String("city")) :: (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil]), {
  final class anon$macro$23 extends AnyRef with shapeless.Generic[example.Config.ConfigData] {
    def <init>(): anon$macro$23 = {
      anon$macro$23.super.<init>();
      ()
    };
    type Repr = String :: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil;
    def to(p: example.Config.ConfigData): anon$macro$23.this.Repr = p match {
  case (city: String, categories: List[String], mon: List[List[String]], tue: List[List[String]], wed: List[List[String]], thu: List[List[String]], fri: List[List[String]], sat: List[List[String]], sun: List[List[String]], days: Int)example.Config.ConfigData((pat$macro$13 @ _), (pat$macro$14 @ _), (pat$macro$15 @ _), (pat$macro$16 @ _), (pat$macro$17 @ _), (pat$macro$18 @ _), (pat$macro$19 @ _), (pat$macro$20 @ _), (pat$macro$21 @ _), (pat$macro$22 @ _)) => shapeless.::.apply[String, List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$13, shapeless.::.apply[List[String], List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$14, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$15, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$16, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$17, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$18, shapeless.::.apply[List[List[String]], List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$19, shapeless.::.apply[List[List[String]], List[List[String]] :: Int :: shapeless.HNil.type](pat$macro$20, shapeless.::.apply[List[List[String]], Int :: shapeless.HNil.type](pat$macro$21, shapeless.::.apply[Int, shapeless.HNil.type](pat$macro$22, shapeless.HNil))))))))))
}.asInstanceOf[anon$macro$23.this.Repr];
    def from(p: anon$macro$23.this.Repr): example.Config.ConfigData = p match {
      case (head: String, tail: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)String :: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$13 @ _), (head: List[String], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$14 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$15 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$16 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$17 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$18 @ _), (head: List[List[String]], tail: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$19 @ _), (head: List[List[String]], tail: List[List[String]] :: Int :: shapeless.HNil)List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil((pat$macro$20 @ _), (head: List[List[String]], tail: Int :: shapeless.HNil)List[List[String]] :: Int :: shapeless.HNil((pat$macro$21 @ _), (head: Int, tail: shapeless.HNil)Int :: shapeless.HNil((pat$macro$22 @ _), shapeless.HNil)))))))))) => example.this.Config.ConfigData.apply(pat$macro$13, pat$macro$14, pat$macro$15, pat$macro$16, pat$macro$17, pat$macro$18, pat$macro$19, pat$macro$20, pat$macro$21, pat$macro$22)
    }
  };
  (new anon$macro$23(): shapeless.Generic.Aux[example.Config.ConfigData,String :: List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("city"), String, (Symbol @@ String("categories")) :: (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[String] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("categories"),List[String]] :: shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("categories"), List[String], (Symbol @@ String("mon")) :: (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("mon"), List[List[String]], (Symbol @@ String("tue")) :: (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("tue"), List[List[String]], (Symbol @@ String("wed")) :: (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("wed"), List[List[String]], (Symbol @@ String("thu")) :: (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("thu"), List[List[String]], (Symbol @@ String("fri")) :: (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("fri"), List[List[String]], (Symbol @@ String("sat")) :: (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("sat"), List[List[String]], (Symbol @@ String("sun")) :: (Symbol @@ String("days")) :: shapeless.HNil, List[List[String]] :: Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("sun"), List[List[String]], (Symbol @@ String("days")) :: shapeless.HNil, Int :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("days"), Int, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("days")]](scala.Symbol.apply("days").asInstanceOf[Symbol @@ String("days")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("days")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("sun")]](scala.Symbol.apply("sun").asInstanceOf[Symbol @@ String("sun")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("sun")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("sat")]](scala.Symbol.apply("sat").asInstanceOf[Symbol @@ String("sat")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("sat")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("fri")]](scala.Symbol.apply("fri").asInstanceOf[Symbol @@ String("fri")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("fri")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("thu")]](scala.Symbol.apply("thu").asInstanceOf[Symbol @@ String("thu")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("thu")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("wed")]](scala.Symbol.apply("wed").asInstanceOf[Symbol @@ String("wed")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("wed")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("tue")]](scala.Symbol.apply("tue").asInstanceOf[Symbol @@ String("tue")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("tue")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("mon")]](scala.Symbol.apply("mon").asInstanceOf[Symbol @@ String("mon")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("mon")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("categories")]](scala.Symbol.apply("categories").asInstanceOf[Symbol @@ String("categories")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("categories")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("city")]](scala.Symbol.apply("city").asInstanceOf[Symbol @@ String("city")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("city")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("city"),String] :: shapeless.labelled.FieldType[Symbol @@ String("categories"),List[String]] :: shapeless.labelled.FieldType[Symbol @@ String("mon"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("tue"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("wed"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("thu"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("fri"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sat"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("sun"),List[List[String]]] :: shapeless.labelled.FieldType[Symbol @@ String("days"),Int] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.encoding.ReprAsObjectEncoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]](anon$importedEncoder$macro$25.this.inst$macro$24)).asInstanceOf[io.circe.generic.encoding.DerivedAsObjectEncoder[example.Config.ConfigData]];
      <stable> <accessor> lazy val inst$macro$24: io.circe.generic.encoding.ReprAsObjectEncoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.encoding.ReprAsObjectEncoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.encoding.ReprAsObjectEncoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericEncoderForcity: io.circe.Encoder[String] = circe.this.Encoder.encodeString;
    private[this] val circeGenericEncoderForcategories: io.circe.Encoder.AsArray[List[String]] = circe.this.Encoder.encodeList[String](circe.this.Encoder.encodeString);
    private[this] val circeGenericEncoderForsun: io.circe.Encoder.AsArray[List[List[String]]] = circe.this.Encoder.encodeList[List[String]](circe.this.Encoder.encodeList[String](circe.this.Encoder.encodeString));
    private[this] val circeGenericEncoderFordays: io.circe.Encoder[Int] = circe.this.Encoder.encodeInt;
    final def encodeObject(a: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil): io.circe.JsonObject = a match {
      case (head: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String], tail: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForcity @ _), (head: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForcategories @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingFormon @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingFortue @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForwed @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForthu @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForfri @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]], tail: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForsat @ _), (head: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]], tail: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil)List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingForsun @ _), (head: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int], tail: shapeless.HNil)Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil((circeGenericHListBindingFordays @ _), shapeless.HNil)))))))))) => io.circe.JsonObject.fromIterable(scala.collection.immutable.Vector.apply[(String, io.circe.Json)](scala.Tuple2.apply[String, io.circe.Json]("city", $anon.this.circeGenericEncoderForcity.apply(circeGenericHListBindingForcity)), scala.Tuple2.apply[String, io.circe.Json]("categories", $anon.this.circeGenericEncoderForcategories.apply(circeGenericHListBindingForcategories)), scala.Tuple2.apply[String, io.circe.Json]("mon", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingFormon)), scala.Tuple2.apply[String, io.circe.Json]("tue", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingFortue)), scala.Tuple2.apply[String, io.circe.Json]("wed", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingForwed)), scala.Tuple2.apply[String, io.circe.Json]("thu", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingForthu)), scala.Tuple2.apply[String, io.circe.Json]("fri", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingForfri)), scala.Tuple2.apply[String, io.circe.Json]("sat", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingForsat)), scala.Tuple2.apply[String, io.circe.Json]("sun", $anon.this.circeGenericEncoderForsun.apply(circeGenericHListBindingForsun)), scala.Tuple2.apply[String, io.circe.Json]("days", $anon.this.circeGenericEncoderFordays.apply(circeGenericHListBindingFordays))))
    }
  };
  new $anon()
}: io.circe.generic.encoding.ReprAsObjectEncoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]).asInstanceOf[io.circe.generic.encoding.ReprAsObjectEncoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("city")],String] :: List[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("categories")],List[String]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("mon")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("tue")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("wed")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("thu")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("fri")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sat")],List[List[String]]] :: List[List[String]] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("sun")],List[List[String]]] :: Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("days")],Int] :: shapeless.HNil]]
    };
    new anon$importedEncoder$macro$25().inst$macro$1
  };
  shapeless.Lazy.apply[io.circe.generic.encoding.DerivedAsObjectEncoder[example.Config.ConfigData]](inst$macro$26)
}): io.circe.Encoder.AsObject[example.Config.ConfigData])): io.circe.export.Exported[io.circe.Encoder.AsObject[example.Config.ConfigData]]))).toString(), Interface.this.cnf.writeFile$default$2)
      case "importConfig" => Interface.this.cnf.config() match {
        case (value: example.Interface.cnf.ConfigData)scala.util.Success[example.Interface.cnf.ConfigData]((v @ _)) => {
          configData = v;
          scala.Predef.println(Config.showConfigData(configData))
        }
        case (exception: Throwable)scala.util.Failure[example.Interface.cnf.ConfigData]((e @ _)) => scala.Predef.println("Error when trying to read config file")
      }
      case "categories" => Interface.this.api.categories().flatMap[List[example.API.Category]](((list: List[example.API.Category]) => Interface.this.printTryCategories(list)))
      case "cities" => Interface.this.api.cities().flatMap[List[example.API.City]](((list: List[example.API.City]) => Interface.this.printTryCities(list)))
      case "set" => {
        val res: (example.Interface.cnf.ConfigData, String) = Interface.this.cnf.interactiveSet(configData, args.apply(1), args.apply(2));
        configData = res._1;
        if (res._2.==(""))
          scala.Predef.println(Config.showConfigData(configData))
        else
          scala.Predef.println(res._2)
      }
      case "help" => {
        scala.Predef.println("find                - try to find events with configurated before parameters in config");
        scala.Predef.println("printConfig         - print current state of configuration");
        scala.Predef.println("importConfig        - load config from config.txt file");
        scala.Predef.println("exportConfig        - save config to config.txt file");
        scala.Predef.println("categories          - to get list of categories");
        scala.Predef.println("cities              - to get list of cities");
        scala.Predef.println("set <field> <value> - set value for config\n  Examples:\n    set mon [[\"12:00\", \"14:00\"]]\n    set city msk\n    set categories [\"theater\"]\n    set days 5");
        scala.Predef.println("help                - to get this message");
        scala.Predef.println(":q                  - to exit")
      }
      case _ => scala.Predef.println("Unknown command")
    }
  };
  while$1()
}

388
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9151
9151
278
<nosymbol>
Literal
false
0
false
()

389
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Interface
Object
example.Interface
startPrompt
9151
9151
278
<nosymbol>
Block
true
0
false
()

390
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
categories
11590
11644
339
<nosymbol>
Literal
false
0
false
"https://kudago.com/public-api/v1.4/event-categories/"

391
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
categories
11665
11675
340
<nosymbol>
Literal
false
0
false
"order_by"

392
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
categories
11677
11681
340
<nosymbol>
Literal
false
0
false
"id"

393
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
categories
11585
11704
341
scalaj.http.HttpRequest.asString
Select
false
0
false
scalaj.http.Http.apply("https://kudago.com/public-api/v1.4/event-categories/").param("order_by", "id").asString

394
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
categories
11730
11749
342
scalaj.http.HttpResponse.body
Select
false
0
false
jsonCategories.body

395
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
categories
11774
11774
343
io.circe.LowPriorityDecoders.importedDecoder
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.importedDecoder[example.API.Category]((new io.circe.export.Exported[io.circe.Decoder[example.API.Category]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Category]]({
  val inst$macro$12: io.circe.generic.decoding.DerivedDecoder[example.API.Category] = {
    final class anon$importedDecoder$macro$11 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$11 = {
        anon$importedDecoder$macro$11.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$1: io.circe.generic.decoding.DerivedDecoder[example.API.Category] = decoding.this.DerivedDecoder.deriveDecoder[example.API.Category, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.Category, (Symbol @@ String("id")) :: (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil, Int :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.Category] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.Category]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("id")) :: (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("id")) :: (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("id"), (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil.type](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")], shapeless.::.apply[Symbol @@ String("slug"), (Symbol @@ String("name")) :: shapeless.HNil.type](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")], shapeless.::.apply[Symbol @@ String("name"), shapeless.HNil.type](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")], shapeless.HNil)))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.Category,(Symbol @@ String("id")) :: (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil]), {
  final class anon$macro$9 extends AnyRef with shapeless.Generic[example.API.Category] {
    def <init>(): anon$macro$9 = {
      anon$macro$9.super.<init>();
      ()
    };
    type Repr = Int :: String :: String :: shapeless.HNil;
    def to(p: example.API.Category): anon$macro$9.this.Repr = p match {
  case (id: Int, slug: String, name: String)example.API.Category((pat$macro$6 @ _), (pat$macro$7 @ _), (pat$macro$8 @ _)) => shapeless.::.apply[Int, String :: String :: shapeless.HNil.type](pat$macro$6, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$7, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$8, shapeless.HNil)))
}.asInstanceOf[anon$macro$9.this.Repr];
    def from(p: anon$macro$9.this.Repr): example.API.Category = p match {
      case (head: Int, tail: String :: String :: shapeless.HNil)Int :: String :: String :: shapeless.HNil((pat$macro$6 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$7 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$8 @ _), shapeless.HNil))) => API.this.Category.apply(pat$macro$6, pat$macro$7, pat$macro$8)
    }
  };
  (new anon$macro$9(): shapeless.Generic.Aux[example.API.Category,Int :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("id"), Int, (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("slug"), String, (Symbol @@ String("name")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("name"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("name")]](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("name")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("slug")]](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("slug")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("id")]](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("id")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]](anon$importedDecoder$macro$11.this.inst$macro$10)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.Category]];
      <stable> <accessor> lazy val inst$macro$10: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForid: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForname: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecode(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("slug")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecode(c.downField("slug")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecode(c.downField("name")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecodeAccumulating(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("slug")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecodeAccumulating(c.downField("slug")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("name")], String, shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecodeAccumulating(c.downField("name")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]]
    };
    new anon$importedDecoder$macro$11().inst$macro$1
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Category]](inst$macro$12)
}): io.circe.Decoder[example.API.Category])): io.circe.export.Exported[io.circe.Decoder[example.API.Category]]))

396
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
categories
11774
11774
343
io.circe.Decoder.decodeList
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.decodeList[example.API.Category](circe.this.Decoder.importedDecoder[example.API.Category]((new io.circe.export.Exported[io.circe.Decoder[example.API.Category]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Category]]({
  val inst$macro$12: io.circe.generic.decoding.DerivedDecoder[example.API.Category] = {
    final class anon$importedDecoder$macro$11 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$11 = {
        anon$importedDecoder$macro$11.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$1: io.circe.generic.decoding.DerivedDecoder[example.API.Category] = decoding.this.DerivedDecoder.deriveDecoder[example.API.Category, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.Category, (Symbol @@ String("id")) :: (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil, Int :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.Category] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.Category]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("id")) :: (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("id")) :: (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("id"), (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil.type](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")], shapeless.::.apply[Symbol @@ String("slug"), (Symbol @@ String("name")) :: shapeless.HNil.type](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")], shapeless.::.apply[Symbol @@ String("name"), shapeless.HNil.type](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")], shapeless.HNil)))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.Category,(Symbol @@ String("id")) :: (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil]), {
  final class anon$macro$9 extends AnyRef with shapeless.Generic[example.API.Category] {
    def <init>(): anon$macro$9 = {
      anon$macro$9.super.<init>();
      ()
    };
    type Repr = Int :: String :: String :: shapeless.HNil;
    def to(p: example.API.Category): anon$macro$9.this.Repr = p match {
  case (id: Int, slug: String, name: String)example.API.Category((pat$macro$6 @ _), (pat$macro$7 @ _), (pat$macro$8 @ _)) => shapeless.::.apply[Int, String :: String :: shapeless.HNil.type](pat$macro$6, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$7, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$8, shapeless.HNil)))
}.asInstanceOf[anon$macro$9.this.Repr];
    def from(p: anon$macro$9.this.Repr): example.API.Category = p match {
      case (head: Int, tail: String :: String :: shapeless.HNil)Int :: String :: String :: shapeless.HNil((pat$macro$6 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$7 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$8 @ _), shapeless.HNil))) => API.this.Category.apply(pat$macro$6, pat$macro$7, pat$macro$8)
    }
  };
  (new anon$macro$9(): shapeless.Generic.Aux[example.API.Category,Int :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("id"), Int, (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("slug"), String, (Symbol @@ String("name")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("name"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("name")]](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("name")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("slug")]](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("slug")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("id")]](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("id")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]](anon$importedDecoder$macro$11.this.inst$macro$10)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.Category]];
      <stable> <accessor> lazy val inst$macro$10: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForid: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForname: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecode(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("slug")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecode(c.downField("slug")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecode(c.downField("name")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecodeAccumulating(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("slug")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecodeAccumulating(c.downField("slug")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("name")], String, shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecodeAccumulating(c.downField("name")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]]
    };
    new anon$importedDecoder$macro$11().inst$macro$1
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Category]](inst$macro$12)
}): io.circe.Decoder[example.API.Category])): io.circe.export.Exported[io.circe.Decoder[example.API.Category]])))

397
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
categories
11756
11779
343
io.circe.Parser.decode
ApplyToImplicitArgs
false
0
false
io.circe.parser.`package`.decode[example.API.Categories](str)(circe.this.Decoder.decodeList[example.API.Category](circe.this.Decoder.importedDecoder[example.API.Category]((new io.circe.export.Exported[io.circe.Decoder[example.API.Category]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Category]]({
  val inst$macro$12: io.circe.generic.decoding.DerivedDecoder[example.API.Category] = {
    final class anon$importedDecoder$macro$11 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$11 = {
        anon$importedDecoder$macro$11.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$1: io.circe.generic.decoding.DerivedDecoder[example.API.Category] = decoding.this.DerivedDecoder.deriveDecoder[example.API.Category, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.Category, (Symbol @@ String("id")) :: (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil, Int :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.Category] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.Category]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("id")) :: (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("id")) :: (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("id"), (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil.type](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")], shapeless.::.apply[Symbol @@ String("slug"), (Symbol @@ String("name")) :: shapeless.HNil.type](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")], shapeless.::.apply[Symbol @@ String("name"), shapeless.HNil.type](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")], shapeless.HNil)))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.Category,(Symbol @@ String("id")) :: (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil]), {
  final class anon$macro$9 extends AnyRef with shapeless.Generic[example.API.Category] {
    def <init>(): anon$macro$9 = {
      anon$macro$9.super.<init>();
      ()
    };
    type Repr = Int :: String :: String :: shapeless.HNil;
    def to(p: example.API.Category): anon$macro$9.this.Repr = p match {
  case (id: Int, slug: String, name: String)example.API.Category((pat$macro$6 @ _), (pat$macro$7 @ _), (pat$macro$8 @ _)) => shapeless.::.apply[Int, String :: String :: shapeless.HNil.type](pat$macro$6, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$7, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$8, shapeless.HNil)))
}.asInstanceOf[anon$macro$9.this.Repr];
    def from(p: anon$macro$9.this.Repr): example.API.Category = p match {
      case (head: Int, tail: String :: String :: shapeless.HNil)Int :: String :: String :: shapeless.HNil((pat$macro$6 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$7 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$8 @ _), shapeless.HNil))) => API.this.Category.apply(pat$macro$6, pat$macro$7, pat$macro$8)
    }
  };
  (new anon$macro$9(): shapeless.Generic.Aux[example.API.Category,Int :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("id"), Int, (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("slug"), String, (Symbol @@ String("name")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("name"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("name")]](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("name")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("slug")]](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("slug")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("id")]](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("id")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]](anon$importedDecoder$macro$11.this.inst$macro$10)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.Category]];
      <stable> <accessor> lazy val inst$macro$10: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForid: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForname: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecode(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("slug")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecode(c.downField("slug")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecode(c.downField("name")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecodeAccumulating(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("slug")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecodeAccumulating(c.downField("slug")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("name")], String, shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecodeAccumulating(c.downField("name")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]]
    };
    new anon$importedDecoder$macro$11().inst$macro$1
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Category]](inst$macro$12)
}): io.circe.Decoder[example.API.Category])): io.circe.export.Exported[io.circe.Decoder[example.API.Category]]))))

398
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
categories
11783
11788
343
example.Utils.toTry
Apply
false
0
false
Utils.toTry[example.API.Categories](either)

399
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
categories
11756
11788
343
scalaz.syntax.IdOps.|>
Apply
false
0
false
scalaz.Scalaz.ToIdOps[Either[io.circe.Error,example.API.Categories]](io.circe.parser.`package`.decode[example.API.Categories](str)(circe.this.Decoder.decodeList[example.API.Category](circe.this.Decoder.importedDecoder[example.API.Category]((new io.circe.export.Exported[io.circe.Decoder[example.API.Category]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Category]]({
  val inst$macro$12: io.circe.generic.decoding.DerivedDecoder[example.API.Category] = {
    final class anon$importedDecoder$macro$11 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$11 = {
        anon$importedDecoder$macro$11.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$1: io.circe.generic.decoding.DerivedDecoder[example.API.Category] = decoding.this.DerivedDecoder.deriveDecoder[example.API.Category, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.Category, (Symbol @@ String("id")) :: (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil, Int :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.Category] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.Category]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("id")) :: (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("id")) :: (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("id"), (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil.type](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")], shapeless.::.apply[Symbol @@ String("slug"), (Symbol @@ String("name")) :: shapeless.HNil.type](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")], shapeless.::.apply[Symbol @@ String("name"), shapeless.HNil.type](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")], shapeless.HNil)))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.Category,(Symbol @@ String("id")) :: (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil]), {
  final class anon$macro$9 extends AnyRef with shapeless.Generic[example.API.Category] {
    def <init>(): anon$macro$9 = {
      anon$macro$9.super.<init>();
      ()
    };
    type Repr = Int :: String :: String :: shapeless.HNil;
    def to(p: example.API.Category): anon$macro$9.this.Repr = p match {
  case (id: Int, slug: String, name: String)example.API.Category((pat$macro$6 @ _), (pat$macro$7 @ _), (pat$macro$8 @ _)) => shapeless.::.apply[Int, String :: String :: shapeless.HNil.type](pat$macro$6, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$7, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$8, shapeless.HNil)))
}.asInstanceOf[anon$macro$9.this.Repr];
    def from(p: anon$macro$9.this.Repr): example.API.Category = p match {
      case (head: Int, tail: String :: String :: shapeless.HNil)Int :: String :: String :: shapeless.HNil((pat$macro$6 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$7 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$8 @ _), shapeless.HNil))) => API.this.Category.apply(pat$macro$6, pat$macro$7, pat$macro$8)
    }
  };
  (new anon$macro$9(): shapeless.Generic.Aux[example.API.Category,Int :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("id"), Int, (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("slug"), String, (Symbol @@ String("name")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("name"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("name")]](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("name")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("slug")]](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("slug")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("id")]](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("id")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]](anon$importedDecoder$macro$11.this.inst$macro$10)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.Category]];
      <stable> <accessor> lazy val inst$macro$10: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForid: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForname: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecode(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("slug")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecode(c.downField("slug")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecode(c.downField("name")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecodeAccumulating(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("slug")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecodeAccumulating(c.downField("slug")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("name")], String, shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecodeAccumulating(c.downField("name")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]]
    };
    new anon$importedDecoder$macro$11().inst$macro$1
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Category]](inst$macro$12)
}): io.circe.Decoder[example.API.Category])): io.circe.export.Exported[io.circe.Decoder[example.API.Category]]))))).|>[scala.util.Try[example.API.Categories]](((either: Either[io.circe.Error,example.API.Categories]) => Utils.toTry[example.API.Categories](either)))

400
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
cities
11937
11992
351
<nosymbol>
Literal
false
0
false
"https://kudago.com/public-api/v1.4/locations/?lang=ru"

401
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
cities
11932
12011
352
scalaj.http.HttpRequest.asString
Select
false
0
false
scalaj.http.Http.apply("https://kudago.com/public-api/v1.4/locations/?lang=ru").asString

402
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
cities
12035
12054
353
scalaj.http.HttpResponse.body
Select
false
0
false
jsonCategories.body

403
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
cities
12097
12110
354
io.circe.generic.semiauto.deriveDecoder
ApplyToImplicitArgs
false
0
false
io.circe.generic.semiauto.deriveDecoder[example.API.City]({
  val inst$macro$10: io.circe.generic.decoding.DerivedDecoder[example.API.City] = {
    final class anon$lazy$macro$9 extends AnyRef with Serializable {
      def <init>(): anon$lazy$macro$9 = {
        anon$lazy$macro$9.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$1: io.circe.generic.decoding.DerivedDecoder[example.API.City] = decoding.this.DerivedDecoder.deriveDecoder[example.API.City, shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.City, (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.City] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.City]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("slug"), (Symbol @@ String("name")) :: shapeless.HNil.type](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")], shapeless.::.apply[Symbol @@ String("name"), shapeless.HNil.type](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")], shapeless.HNil))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.City,(Symbol @@ String("slug")) :: (Symbol @@ String("name")) :: shapeless.HNil]), {
  final class anon$macro$7 extends AnyRef with shapeless.Generic[example.API.City] {
    def <init>(): anon$macro$7 = {
      anon$macro$7.super.<init>();
      ()
    };
    type Repr = String :: String :: shapeless.HNil;
    def to(p: example.API.City): anon$macro$7.this.Repr = p match {
  case (slug: String, name: String)example.API.City((pat$macro$5 @ _), (pat$macro$6 @ _)) => shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$5, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$6, shapeless.HNil))
}.asInstanceOf[anon$macro$7.this.Repr];
    def from(p: anon$macro$7.this.Repr): example.API.City = p match {
      case (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$5 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$6 @ _), shapeless.HNil)) => API.this.City.apply(pat$macro$5, pat$macro$6)
    }
  };
  (new anon$macro$7(): shapeless.Generic.Aux[example.API.City,String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("slug"), String, (Symbol @@ String("name")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("name"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("name")]](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("name")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("slug")]](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("slug")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]](anon$lazy$macro$9.this.inst$macro$8)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.City]];
      <stable> <accessor> lazy val inst$macro$8: io.circe.generic.decoding.ReprDecoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForname: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("slug")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecode(c.downField("slug")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecode(c.downField("name")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("slug")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecodeAccumulating(c.downField("slug")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("name")], String, shapeless.HNil]($anon.this.circeGenericDecoderForname.tryDecodeAccumulating(c.downField("name")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: shapeless.HNil]]
    };
    new anon$lazy$macro$9().inst$macro$1
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.City]](inst$macro$10)
})

404
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
cities
12129
12129
355
io.circe.Decoder.decodeList
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.decodeList[example.API.City](decoder)

405
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
cities
12115
12134
355
io.circe.Parser.decode
ApplyToImplicitArgs
false
0
false
io.circe.parser.`package`.decode[example.API.Cities](str)(circe.this.Decoder.decodeList[example.API.City](decoder))

406
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
cities
12138
12143
355
example.Utils.toTry
Apply
false
0
false
Utils.toTry[example.API.Cities](either)

407
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
cities
12115
12143
355
scalaz.syntax.IdOps.|>
Apply
false
0
false
scalaz.Scalaz.ToIdOps[Either[io.circe.Error,example.API.Cities]](io.circe.parser.`package`.decode[example.API.Cities](str)(circe.this.Decoder.decodeList[example.API.City](decoder))).|>[scala.util.Try[example.API.Cities]](((either: Either[io.circe.Error,example.API.Cities]) => Utils.toTry[example.API.Cities](either)))

408
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12380
12391
361
example.Config.ConfigInternal.city
Select
false
0
false
config.city

409
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12413
12430
362
example.Config.ConfigInternal.categories
Select
false
0
false
config.categories

410
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12447
12459
363
example.Config.ConfigInternal.dates
Select
false
0
false
config.dates

411
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12547
12591
367
<nosymbol>
Literal
false
0
false
"https://kudago.com/public-api/v1.4/events/"

412
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12610
12621
368
<nosymbol>
Literal
false
0
false
"page_size"

413
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12623
12628
368
<nosymbol>
Literal
false
0
false
"100"

414
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12647
12657
369
<nosymbol>
Literal
false
0
false
"location"

415
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12682
12696
370
<nosymbol>
Literal
false
0
false
"actual_since"

416
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12698
12712
370
org.joda.time.base.AbstractDateTime.toString
Apply
false
0
false
start.toString()

417
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12731
12745
371
<nosymbol>
Literal
false
0
false
"actual_until"

418
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12747
12759
371
org.joda.time.base.AbstractDateTime.toString
Apply
false
0
false
end.toString()

419
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12778
12790
372
<nosymbol>
Literal
false
0
false
"categories"

420
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12792
12815
372
scala.collection.IterableOnceOps.mkString
Apply
false
0
false
categories.mkString(",")

421
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12542
12852
374
scalaj.http.HttpResponse.body
Select
false
0
false
scalaj.http.Http.apply("https://kudago.com/public-api/v1.4/events/").param("page_size", "100").param("location", city).param("actual_since", start.toString()).param("actual_until", end.toString()).param("categories", categories.mkString(",")).asString.body

422
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12904
12904
375
io.circe.LowPriorityDecoders.importedDecoder
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.importedDecoder[example.API.EventsInternal]((new io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]]({
  val inst$macro$24: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = {
    final class anon$importedDecoder$macro$23 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$23 = {
        anon$importedDecoder$macro$23.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$1: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = decoding.this.DerivedDecoder.deriveDecoder[example.API.EventsInternal, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.EventsInternal, (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.EventsInternal] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.EventsInternal]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("count"), (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")], shapeless.::.apply[Symbol @@ String("next"), (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")], shapeless.::.apply[Symbol @@ String("previous"), (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")], shapeless.::.apply[Symbol @@ String("results"), shapeless.HNil.type](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.EventsInternal,(Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil]), {
  final class anon$macro$11 extends AnyRef with shapeless.Generic[example.API.EventsInternal] {
    def <init>(): anon$macro$11 = {
      anon$macro$11.super.<init>();
      ()
    };
    type Repr = Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil;
    def to(p: example.API.EventsInternal): anon$macro$11.this.Repr = p match {
  case (count: Int, next: Option[String], previous: Option[String], results: List[example.API.Event])example.API.EventsInternal((pat$macro$7 @ _), (pat$macro$8 @ _), (pat$macro$9 @ _), (pat$macro$10 @ _)) => shapeless.::.apply[Int, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$7, shapeless.::.apply[Option[String], Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$8, shapeless.::.apply[Option[String], List[example.API.Event] :: shapeless.HNil.type](pat$macro$9, shapeless.::.apply[List[example.API.Event], shapeless.HNil.type](pat$macro$10, shapeless.HNil))))
}.asInstanceOf[anon$macro$11.this.Repr];
    def from(p: anon$macro$11.this.Repr): example.API.EventsInternal = p match {
      case (head: Int, tail: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil)Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$7 @ _), (head: Option[String], tail: Option[String] :: List[example.API.Event] :: shapeless.HNil)Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$8 @ _), (head: Option[String], tail: List[example.API.Event] :: shapeless.HNil)Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$9 @ _), (head: List[example.API.Event], tail: shapeless.HNil)List[example.API.Event] :: shapeless.HNil((pat$macro$10 @ _), shapeless.HNil)))) => API.this.EventsInternal.apply(pat$macro$7, pat$macro$8, pat$macro$9, pat$macro$10)
    }
  };
  (new anon$macro$11(): shapeless.Generic.Aux[example.API.EventsInternal,Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("count"), Int, (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("next"), Option[String], (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("previous"), Option[String], (Symbol @@ String("results")) :: shapeless.HNil, List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("results"), List[example.API.Event], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("results")]](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("results")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("previous")]](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("previous")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("next")]](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("next")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("count")]](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("count")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]](anon$importedDecoder$macro$23.this.inst$macro$12)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]];
      <stable> <accessor> lazy val inst$macro$12: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForcount: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForprevious: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericDecoderForresults: io.circe.Decoder[List[example.API.Event]] = circe.this.Decoder.decodeList[example.API.Event](circe.this.Decoder.importedDecoder[example.API.Event]((new io.circe.export.Exported[io.circe.Decoder[example.API.Event]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](anon$importedDecoder$macro$23.this.inst$macro$13)): io.circe.Decoder[example.API.Event])): io.circe.export.Exported[io.circe.Decoder[example.API.Event]])));
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecode(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecode(c.downField("results")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecodeAccumulating(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecodeAccumulating(c.downField("results")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$13: io.circe.generic.decoding.DerivedDecoder[example.API.Event] = decoding.this.DerivedDecoder.deriveDecoder[example.API.Event, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.Event, (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, Int :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.Event] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.Event]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("id"), (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")], shapeless.::.apply[Symbol @@ String("title"), (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")], shapeless.::.apply[Symbol @@ String("slug"), shapeless.HNil.type](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")], shapeless.HNil)))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.Event,(Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil]), {
  final class anon$macro$21 extends AnyRef with shapeless.Generic[example.API.Event] {
    def <init>(): anon$macro$21 = {
      anon$macro$21.super.<init>();
      ()
    };
    type Repr = Int :: String :: String :: shapeless.HNil;
    def to(p: example.API.Event): anon$macro$21.this.Repr = p match {
  case (id: Int, title: String, slug: String)example.API.Event((pat$macro$18 @ _), (pat$macro$19 @ _), (pat$macro$20 @ _)) => shapeless.::.apply[Int, String :: String :: shapeless.HNil.type](pat$macro$18, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$19, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$20, shapeless.HNil)))
}.asInstanceOf[anon$macro$21.this.Repr];
    def from(p: anon$macro$21.this.Repr): example.API.Event = p match {
      case (head: Int, tail: String :: String :: shapeless.HNil)Int :: String :: String :: shapeless.HNil((pat$macro$18 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$19 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$20 @ _), shapeless.HNil))) => API.this.Event.apply(pat$macro$18, pat$macro$19, pat$macro$20)
    }
  };
  (new anon$macro$21(): shapeless.Generic.Aux[example.API.Event,Int :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("id"), Int, (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("title"), String, (Symbol @@ String("slug")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("slug"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("slug")]](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("slug")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("title")]](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("title")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("id")]](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("id")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]](anon$importedDecoder$macro$23.this.inst$macro$22)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.Event]];
      <stable> <accessor> lazy val inst$macro$22: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForid: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForslug: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecode(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("slug")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecodeAccumulating(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("slug")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]]
    };
    new anon$importedDecoder$macro$23().inst$macro$1
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]](inst$macro$24)
}): io.circe.Decoder[example.API.EventsInternal])): io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]]))

423
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12882
12909
375
io.circe.Parser.decode
ApplyToImplicitArgs
false
0
false
io.circe.parser.`package`.decode[example.API.EventsInternal](str)(circe.this.Decoder.importedDecoder[example.API.EventsInternal]((new io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]]({
  val inst$macro$24: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = {
    final class anon$importedDecoder$macro$23 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$23 = {
        anon$importedDecoder$macro$23.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$1: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = decoding.this.DerivedDecoder.deriveDecoder[example.API.EventsInternal, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.EventsInternal, (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.EventsInternal] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.EventsInternal]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("count"), (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")], shapeless.::.apply[Symbol @@ String("next"), (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")], shapeless.::.apply[Symbol @@ String("previous"), (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")], shapeless.::.apply[Symbol @@ String("results"), shapeless.HNil.type](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.EventsInternal,(Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil]), {
  final class anon$macro$11 extends AnyRef with shapeless.Generic[example.API.EventsInternal] {
    def <init>(): anon$macro$11 = {
      anon$macro$11.super.<init>();
      ()
    };
    type Repr = Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil;
    def to(p: example.API.EventsInternal): anon$macro$11.this.Repr = p match {
  case (count: Int, next: Option[String], previous: Option[String], results: List[example.API.Event])example.API.EventsInternal((pat$macro$7 @ _), (pat$macro$8 @ _), (pat$macro$9 @ _), (pat$macro$10 @ _)) => shapeless.::.apply[Int, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$7, shapeless.::.apply[Option[String], Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$8, shapeless.::.apply[Option[String], List[example.API.Event] :: shapeless.HNil.type](pat$macro$9, shapeless.::.apply[List[example.API.Event], shapeless.HNil.type](pat$macro$10, shapeless.HNil))))
}.asInstanceOf[anon$macro$11.this.Repr];
    def from(p: anon$macro$11.this.Repr): example.API.EventsInternal = p match {
      case (head: Int, tail: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil)Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$7 @ _), (head: Option[String], tail: Option[String] :: List[example.API.Event] :: shapeless.HNil)Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$8 @ _), (head: Option[String], tail: List[example.API.Event] :: shapeless.HNil)Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$9 @ _), (head: List[example.API.Event], tail: shapeless.HNil)List[example.API.Event] :: shapeless.HNil((pat$macro$10 @ _), shapeless.HNil)))) => API.this.EventsInternal.apply(pat$macro$7, pat$macro$8, pat$macro$9, pat$macro$10)
    }
  };
  (new anon$macro$11(): shapeless.Generic.Aux[example.API.EventsInternal,Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("count"), Int, (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("next"), Option[String], (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("previous"), Option[String], (Symbol @@ String("results")) :: shapeless.HNil, List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("results"), List[example.API.Event], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("results")]](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("results")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("previous")]](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("previous")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("next")]](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("next")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("count")]](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("count")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]](anon$importedDecoder$macro$23.this.inst$macro$12)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]];
      <stable> <accessor> lazy val inst$macro$12: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForcount: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForprevious: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericDecoderForresults: io.circe.Decoder[List[example.API.Event]] = circe.this.Decoder.decodeList[example.API.Event](circe.this.Decoder.importedDecoder[example.API.Event]((new io.circe.export.Exported[io.circe.Decoder[example.API.Event]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](anon$importedDecoder$macro$23.this.inst$macro$13)): io.circe.Decoder[example.API.Event])): io.circe.export.Exported[io.circe.Decoder[example.API.Event]])));
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecode(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecode(c.downField("results")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecodeAccumulating(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecodeAccumulating(c.downField("results")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$13: io.circe.generic.decoding.DerivedDecoder[example.API.Event] = decoding.this.DerivedDecoder.deriveDecoder[example.API.Event, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.Event, (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, Int :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.Event] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.Event]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("id"), (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")], shapeless.::.apply[Symbol @@ String("title"), (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")], shapeless.::.apply[Symbol @@ String("slug"), shapeless.HNil.type](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")], shapeless.HNil)))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.Event,(Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil]), {
  final class anon$macro$21 extends AnyRef with shapeless.Generic[example.API.Event] {
    def <init>(): anon$macro$21 = {
      anon$macro$21.super.<init>();
      ()
    };
    type Repr = Int :: String :: String :: shapeless.HNil;
    def to(p: example.API.Event): anon$macro$21.this.Repr = p match {
  case (id: Int, title: String, slug: String)example.API.Event((pat$macro$18 @ _), (pat$macro$19 @ _), (pat$macro$20 @ _)) => shapeless.::.apply[Int, String :: String :: shapeless.HNil.type](pat$macro$18, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$19, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$20, shapeless.HNil)))
}.asInstanceOf[anon$macro$21.this.Repr];
    def from(p: anon$macro$21.this.Repr): example.API.Event = p match {
      case (head: Int, tail: String :: String :: shapeless.HNil)Int :: String :: String :: shapeless.HNil((pat$macro$18 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$19 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$20 @ _), shapeless.HNil))) => API.this.Event.apply(pat$macro$18, pat$macro$19, pat$macro$20)
    }
  };
  (new anon$macro$21(): shapeless.Generic.Aux[example.API.Event,Int :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("id"), Int, (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("title"), String, (Symbol @@ String("slug")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("slug"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("slug")]](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("slug")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("title")]](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("title")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("id")]](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("id")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]](anon$importedDecoder$macro$23.this.inst$macro$22)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.Event]];
      <stable> <accessor> lazy val inst$macro$22: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForid: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForslug: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecode(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("slug")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecodeAccumulating(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("slug")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]]
    };
    new anon$importedDecoder$macro$23().inst$macro$1
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]](inst$macro$24)
}): io.circe.Decoder[example.API.EventsInternal])): io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]])))

424
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12913
12918
375
example.Utils.toTry
Apply
false
0
false
Utils.toTry[example.API.EventsInternal](either)

425
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12882
12918
375
scalaz.syntax.IdOps.|>
Apply
false
0
false
scalaz.Scalaz.ToIdOps[Either[io.circe.Error,example.API.EventsInternal]](io.circe.parser.`package`.decode[example.API.EventsInternal](str)(circe.this.Decoder.importedDecoder[example.API.EventsInternal]((new io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]]({
  val inst$macro$24: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = {
    final class anon$importedDecoder$macro$23 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$23 = {
        anon$importedDecoder$macro$23.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$1: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = decoding.this.DerivedDecoder.deriveDecoder[example.API.EventsInternal, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.EventsInternal, (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.EventsInternal] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.EventsInternal]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("count"), (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")], shapeless.::.apply[Symbol @@ String("next"), (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")], shapeless.::.apply[Symbol @@ String("previous"), (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")], shapeless.::.apply[Symbol @@ String("results"), shapeless.HNil.type](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.EventsInternal,(Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil]), {
  final class anon$macro$11 extends AnyRef with shapeless.Generic[example.API.EventsInternal] {
    def <init>(): anon$macro$11 = {
      anon$macro$11.super.<init>();
      ()
    };
    type Repr = Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil;
    def to(p: example.API.EventsInternal): anon$macro$11.this.Repr = p match {
  case (count: Int, next: Option[String], previous: Option[String], results: List[example.API.Event])example.API.EventsInternal((pat$macro$7 @ _), (pat$macro$8 @ _), (pat$macro$9 @ _), (pat$macro$10 @ _)) => shapeless.::.apply[Int, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$7, shapeless.::.apply[Option[String], Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$8, shapeless.::.apply[Option[String], List[example.API.Event] :: shapeless.HNil.type](pat$macro$9, shapeless.::.apply[List[example.API.Event], shapeless.HNil.type](pat$macro$10, shapeless.HNil))))
}.asInstanceOf[anon$macro$11.this.Repr];
    def from(p: anon$macro$11.this.Repr): example.API.EventsInternal = p match {
      case (head: Int, tail: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil)Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$7 @ _), (head: Option[String], tail: Option[String] :: List[example.API.Event] :: shapeless.HNil)Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$8 @ _), (head: Option[String], tail: List[example.API.Event] :: shapeless.HNil)Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$9 @ _), (head: List[example.API.Event], tail: shapeless.HNil)List[example.API.Event] :: shapeless.HNil((pat$macro$10 @ _), shapeless.HNil)))) => API.this.EventsInternal.apply(pat$macro$7, pat$macro$8, pat$macro$9, pat$macro$10)
    }
  };
  (new anon$macro$11(): shapeless.Generic.Aux[example.API.EventsInternal,Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("count"), Int, (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("next"), Option[String], (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("previous"), Option[String], (Symbol @@ String("results")) :: shapeless.HNil, List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("results"), List[example.API.Event], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("results")]](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("results")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("previous")]](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("previous")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("next")]](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("next")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("count")]](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("count")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]](anon$importedDecoder$macro$23.this.inst$macro$12)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]];
      <stable> <accessor> lazy val inst$macro$12: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForcount: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForprevious: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericDecoderForresults: io.circe.Decoder[List[example.API.Event]] = circe.this.Decoder.decodeList[example.API.Event](circe.this.Decoder.importedDecoder[example.API.Event]((new io.circe.export.Exported[io.circe.Decoder[example.API.Event]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](anon$importedDecoder$macro$23.this.inst$macro$13)): io.circe.Decoder[example.API.Event])): io.circe.export.Exported[io.circe.Decoder[example.API.Event]])));
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecode(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecode(c.downField("results")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecodeAccumulating(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecodeAccumulating(c.downField("results")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$13: io.circe.generic.decoding.DerivedDecoder[example.API.Event] = decoding.this.DerivedDecoder.deriveDecoder[example.API.Event, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.Event, (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, Int :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.Event] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.Event]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("id"), (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")], shapeless.::.apply[Symbol @@ String("title"), (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")], shapeless.::.apply[Symbol @@ String("slug"), shapeless.HNil.type](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")], shapeless.HNil)))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.Event,(Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil]), {
  final class anon$macro$21 extends AnyRef with shapeless.Generic[example.API.Event] {
    def <init>(): anon$macro$21 = {
      anon$macro$21.super.<init>();
      ()
    };
    type Repr = Int :: String :: String :: shapeless.HNil;
    def to(p: example.API.Event): anon$macro$21.this.Repr = p match {
  case (id: Int, title: String, slug: String)example.API.Event((pat$macro$18 @ _), (pat$macro$19 @ _), (pat$macro$20 @ _)) => shapeless.::.apply[Int, String :: String :: shapeless.HNil.type](pat$macro$18, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$19, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$20, shapeless.HNil)))
}.asInstanceOf[anon$macro$21.this.Repr];
    def from(p: anon$macro$21.this.Repr): example.API.Event = p match {
      case (head: Int, tail: String :: String :: shapeless.HNil)Int :: String :: String :: shapeless.HNil((pat$macro$18 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$19 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$20 @ _), shapeless.HNil))) => API.this.Event.apply(pat$macro$18, pat$macro$19, pat$macro$20)
    }
  };
  (new anon$macro$21(): shapeless.Generic.Aux[example.API.Event,Int :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("id"), Int, (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("title"), String, (Symbol @@ String("slug")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("slug"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("slug")]](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("slug")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("title")]](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("title")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("id")]](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("id")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]](anon$importedDecoder$macro$23.this.inst$macro$22)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.Event]];
      <stable> <accessor> lazy val inst$macro$22: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForid: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForslug: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecode(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("slug")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecodeAccumulating(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("slug")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]]
    };
    new anon$importedDecoder$macro$23().inst$macro$1
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]](inst$macro$24)
}): io.circe.Decoder[example.API.EventsInternal])): io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]])))).|>[scala.util.Try[example.API.EventsInternal]](((either: Either[io.circe.Error,example.API.EventsInternal]) => Utils.toTry[example.API.EventsInternal](either)))

426
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12931
12955
376
scala.util.Try.isSuccess
Select
false
0
false
eventsInternal.isSuccess

427
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12987
13013
377
example.API.EventsInternal.results
Select
false
0
false
eventsInternal.get.results

428
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12982
13014
377
scala.collection.IterableFactory.apply
Apply
false
0
false
scala.collection.immutable.List.apply[List[example.API.Event]](eventsInternal.get.results)

429
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13058
13062
378
scala.None
Select
false
0
false
scala.None

430
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13031
13062
378
java.lang.Object.!=
Apply
false
0
false
eventsInternal.get.next.!=(scala.None)

431
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13123
13150
379
scala.Option.get
Select
false
0
false
eventsInternal.get.next.get

432
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13118
13165
379
scalaj.http.HttpResponse.body
Select
false
0
false
scalaj.http.Http.apply(eventsInternal.get.next.get).asString.body

433
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13117
13117
379
io.circe.LowPriorityDecoders.importedDecoder
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.importedDecoder[example.API.EventsInternal]((new io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]]({
  val inst$macro$48: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = {
    final class anon$importedDecoder$macro$47 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$47 = {
        anon$importedDecoder$macro$47.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$25: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = decoding.this.DerivedDecoder.deriveDecoder[example.API.EventsInternal, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.EventsInternal, (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.EventsInternal] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.EventsInternal]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("count"), (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")], shapeless.::.apply[Symbol @@ String("next"), (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")], shapeless.::.apply[Symbol @@ String("previous"), (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")], shapeless.::.apply[Symbol @@ String("results"), shapeless.HNil.type](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.EventsInternal,(Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil]), {
  final class anon$macro$35 extends AnyRef with shapeless.Generic[example.API.EventsInternal] {
    def <init>(): anon$macro$35 = {
      anon$macro$35.super.<init>();
      ()
    };
    type Repr = Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil;
    def to(p: example.API.EventsInternal): anon$macro$35.this.Repr = p match {
  case (count: Int, next: Option[String], previous: Option[String], results: List[example.API.Event])example.API.EventsInternal((pat$macro$31 @ _), (pat$macro$32 @ _), (pat$macro$33 @ _), (pat$macro$34 @ _)) => shapeless.::.apply[Int, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$31, shapeless.::.apply[Option[String], Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$32, shapeless.::.apply[Option[String], List[example.API.Event] :: shapeless.HNil.type](pat$macro$33, shapeless.::.apply[List[example.API.Event], shapeless.HNil.type](pat$macro$34, shapeless.HNil))))
}.asInstanceOf[anon$macro$35.this.Repr];
    def from(p: anon$macro$35.this.Repr): example.API.EventsInternal = p match {
      case (head: Int, tail: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil)Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$31 @ _), (head: Option[String], tail: Option[String] :: List[example.API.Event] :: shapeless.HNil)Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$32 @ _), (head: Option[String], tail: List[example.API.Event] :: shapeless.HNil)Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$33 @ _), (head: List[example.API.Event], tail: shapeless.HNil)List[example.API.Event] :: shapeless.HNil((pat$macro$34 @ _), shapeless.HNil)))) => API.this.EventsInternal.apply(pat$macro$31, pat$macro$32, pat$macro$33, pat$macro$34)
    }
  };
  (new anon$macro$35(): shapeless.Generic.Aux[example.API.EventsInternal,Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("count"), Int, (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("next"), Option[String], (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("previous"), Option[String], (Symbol @@ String("results")) :: shapeless.HNil, List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("results"), List[example.API.Event], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("results")]](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("results")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("previous")]](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("previous")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("next")]](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("next")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("count")]](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("count")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]](anon$importedDecoder$macro$47.this.inst$macro$36)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]];
      <stable> <accessor> lazy val inst$macro$36: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForcount: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForprevious: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericDecoderForresults: io.circe.Decoder[List[example.API.Event]] = circe.this.Decoder.decodeList[example.API.Event](circe.this.Decoder.importedDecoder[example.API.Event]((new io.circe.export.Exported[io.circe.Decoder[example.API.Event]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](anon$importedDecoder$macro$47.this.inst$macro$37)): io.circe.Decoder[example.API.Event])): io.circe.export.Exported[io.circe.Decoder[example.API.Event]])));
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecode(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecode(c.downField("results")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecodeAccumulating(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecodeAccumulating(c.downField("results")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$37: io.circe.generic.decoding.DerivedDecoder[example.API.Event] = decoding.this.DerivedDecoder.deriveDecoder[example.API.Event, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.Event, (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, Int :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.Event] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.Event]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("id"), (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")], shapeless.::.apply[Symbol @@ String("title"), (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")], shapeless.::.apply[Symbol @@ String("slug"), shapeless.HNil.type](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")], shapeless.HNil)))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.Event,(Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil]), {
  final class anon$macro$45 extends AnyRef with shapeless.Generic[example.API.Event] {
    def <init>(): anon$macro$45 = {
      anon$macro$45.super.<init>();
      ()
    };
    type Repr = Int :: String :: String :: shapeless.HNil;
    def to(p: example.API.Event): anon$macro$45.this.Repr = p match {
  case (id: Int, title: String, slug: String)example.API.Event((pat$macro$42 @ _), (pat$macro$43 @ _), (pat$macro$44 @ _)) => shapeless.::.apply[Int, String :: String :: shapeless.HNil.type](pat$macro$42, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$43, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$44, shapeless.HNil)))
}.asInstanceOf[anon$macro$45.this.Repr];
    def from(p: anon$macro$45.this.Repr): example.API.Event = p match {
      case (head: Int, tail: String :: String :: shapeless.HNil)Int :: String :: String :: shapeless.HNil((pat$macro$42 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$43 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$44 @ _), shapeless.HNil))) => API.this.Event.apply(pat$macro$42, pat$macro$43, pat$macro$44)
    }
  };
  (new anon$macro$45(): shapeless.Generic.Aux[example.API.Event,Int :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("id"), Int, (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("title"), String, (Symbol @@ String("slug")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("slug"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("slug")]](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("slug")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("title")]](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("title")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("id")]](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("id")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]](anon$importedDecoder$macro$47.this.inst$macro$46)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.Event]];
      <stable> <accessor> lazy val inst$macro$46: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForid: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForslug: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecode(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("slug")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecodeAccumulating(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("slug")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]]
    };
    new anon$importedDecoder$macro$47().inst$macro$25
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]](inst$macro$48)
}): io.circe.Decoder[example.API.EventsInternal])): io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]]))

434
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13095
13166
379
io.circe.Parser.decode
ApplyToImplicitArgs
false
0
false
io.circe.parser.`package`.decode[example.API.EventsInternal](scalaj.http.Http.apply(eventsInternal.get.next.get).asString.body)(circe.this.Decoder.importedDecoder[example.API.EventsInternal]((new io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]]({
  val inst$macro$48: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = {
    final class anon$importedDecoder$macro$47 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$47 = {
        anon$importedDecoder$macro$47.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$25: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = decoding.this.DerivedDecoder.deriveDecoder[example.API.EventsInternal, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.EventsInternal, (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.EventsInternal] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.EventsInternal]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("count"), (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")], shapeless.::.apply[Symbol @@ String("next"), (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")], shapeless.::.apply[Symbol @@ String("previous"), (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")], shapeless.::.apply[Symbol @@ String("results"), shapeless.HNil.type](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.EventsInternal,(Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil]), {
  final class anon$macro$35 extends AnyRef with shapeless.Generic[example.API.EventsInternal] {
    def <init>(): anon$macro$35 = {
      anon$macro$35.super.<init>();
      ()
    };
    type Repr = Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil;
    def to(p: example.API.EventsInternal): anon$macro$35.this.Repr = p match {
  case (count: Int, next: Option[String], previous: Option[String], results: List[example.API.Event])example.API.EventsInternal((pat$macro$31 @ _), (pat$macro$32 @ _), (pat$macro$33 @ _), (pat$macro$34 @ _)) => shapeless.::.apply[Int, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$31, shapeless.::.apply[Option[String], Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$32, shapeless.::.apply[Option[String], List[example.API.Event] :: shapeless.HNil.type](pat$macro$33, shapeless.::.apply[List[example.API.Event], shapeless.HNil.type](pat$macro$34, shapeless.HNil))))
}.asInstanceOf[anon$macro$35.this.Repr];
    def from(p: anon$macro$35.this.Repr): example.API.EventsInternal = p match {
      case (head: Int, tail: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil)Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$31 @ _), (head: Option[String], tail: Option[String] :: List[example.API.Event] :: shapeless.HNil)Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$32 @ _), (head: Option[String], tail: List[example.API.Event] :: shapeless.HNil)Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$33 @ _), (head: List[example.API.Event], tail: shapeless.HNil)List[example.API.Event] :: shapeless.HNil((pat$macro$34 @ _), shapeless.HNil)))) => API.this.EventsInternal.apply(pat$macro$31, pat$macro$32, pat$macro$33, pat$macro$34)
    }
  };
  (new anon$macro$35(): shapeless.Generic.Aux[example.API.EventsInternal,Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("count"), Int, (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("next"), Option[String], (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("previous"), Option[String], (Symbol @@ String("results")) :: shapeless.HNil, List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("results"), List[example.API.Event], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("results")]](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("results")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("previous")]](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("previous")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("next")]](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("next")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("count")]](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("count")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]](anon$importedDecoder$macro$47.this.inst$macro$36)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]];
      <stable> <accessor> lazy val inst$macro$36: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForcount: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForprevious: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericDecoderForresults: io.circe.Decoder[List[example.API.Event]] = circe.this.Decoder.decodeList[example.API.Event](circe.this.Decoder.importedDecoder[example.API.Event]((new io.circe.export.Exported[io.circe.Decoder[example.API.Event]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](anon$importedDecoder$macro$47.this.inst$macro$37)): io.circe.Decoder[example.API.Event])): io.circe.export.Exported[io.circe.Decoder[example.API.Event]])));
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecode(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecode(c.downField("results")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecodeAccumulating(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecodeAccumulating(c.downField("results")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$37: io.circe.generic.decoding.DerivedDecoder[example.API.Event] = decoding.this.DerivedDecoder.deriveDecoder[example.API.Event, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.Event, (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, Int :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.Event] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.Event]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("id"), (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")], shapeless.::.apply[Symbol @@ String("title"), (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")], shapeless.::.apply[Symbol @@ String("slug"), shapeless.HNil.type](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")], shapeless.HNil)))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.Event,(Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil]), {
  final class anon$macro$45 extends AnyRef with shapeless.Generic[example.API.Event] {
    def <init>(): anon$macro$45 = {
      anon$macro$45.super.<init>();
      ()
    };
    type Repr = Int :: String :: String :: shapeless.HNil;
    def to(p: example.API.Event): anon$macro$45.this.Repr = p match {
  case (id: Int, title: String, slug: String)example.API.Event((pat$macro$42 @ _), (pat$macro$43 @ _), (pat$macro$44 @ _)) => shapeless.::.apply[Int, String :: String :: shapeless.HNil.type](pat$macro$42, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$43, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$44, shapeless.HNil)))
}.asInstanceOf[anon$macro$45.this.Repr];
    def from(p: anon$macro$45.this.Repr): example.API.Event = p match {
      case (head: Int, tail: String :: String :: shapeless.HNil)Int :: String :: String :: shapeless.HNil((pat$macro$42 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$43 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$44 @ _), shapeless.HNil))) => API.this.Event.apply(pat$macro$42, pat$macro$43, pat$macro$44)
    }
  };
  (new anon$macro$45(): shapeless.Generic.Aux[example.API.Event,Int :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("id"), Int, (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("title"), String, (Symbol @@ String("slug")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("slug"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("slug")]](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("slug")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("title")]](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("title")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("id")]](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("id")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]](anon$importedDecoder$macro$47.this.inst$macro$46)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.Event]];
      <stable> <accessor> lazy val inst$macro$46: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForid: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForslug: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecode(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("slug")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecodeAccumulating(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("slug")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]]
    };
    new anon$importedDecoder$macro$47().inst$macro$25
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]](inst$macro$48)
}): io.circe.Decoder[example.API.EventsInternal])): io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]])))

435
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13170
13175
379
example.Utils.toTry
Apply
false
0
false
Utils.toTry[example.API.EventsInternal](either)

436
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13095
13175
379
scalaz.syntax.IdOps.|>
Apply
false
0
false
scalaz.Scalaz.ToIdOps[Either[io.circe.Error,example.API.EventsInternal]](io.circe.parser.`package`.decode[example.API.EventsInternal](scalaj.http.Http.apply(eventsInternal.get.next.get).asString.body)(circe.this.Decoder.importedDecoder[example.API.EventsInternal]((new io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]]({
  val inst$macro$48: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = {
    final class anon$importedDecoder$macro$47 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$47 = {
        anon$importedDecoder$macro$47.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$25: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = decoding.this.DerivedDecoder.deriveDecoder[example.API.EventsInternal, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.EventsInternal, (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.EventsInternal] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.EventsInternal]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("count"), (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")], shapeless.::.apply[Symbol @@ String("next"), (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")], shapeless.::.apply[Symbol @@ String("previous"), (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")], shapeless.::.apply[Symbol @@ String("results"), shapeless.HNil.type](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.EventsInternal,(Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil]), {
  final class anon$macro$35 extends AnyRef with shapeless.Generic[example.API.EventsInternal] {
    def <init>(): anon$macro$35 = {
      anon$macro$35.super.<init>();
      ()
    };
    type Repr = Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil;
    def to(p: example.API.EventsInternal): anon$macro$35.this.Repr = p match {
  case (count: Int, next: Option[String], previous: Option[String], results: List[example.API.Event])example.API.EventsInternal((pat$macro$31 @ _), (pat$macro$32 @ _), (pat$macro$33 @ _), (pat$macro$34 @ _)) => shapeless.::.apply[Int, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$31, shapeless.::.apply[Option[String], Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$32, shapeless.::.apply[Option[String], List[example.API.Event] :: shapeless.HNil.type](pat$macro$33, shapeless.::.apply[List[example.API.Event], shapeless.HNil.type](pat$macro$34, shapeless.HNil))))
}.asInstanceOf[anon$macro$35.this.Repr];
    def from(p: anon$macro$35.this.Repr): example.API.EventsInternal = p match {
      case (head: Int, tail: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil)Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$31 @ _), (head: Option[String], tail: Option[String] :: List[example.API.Event] :: shapeless.HNil)Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$32 @ _), (head: Option[String], tail: List[example.API.Event] :: shapeless.HNil)Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$33 @ _), (head: List[example.API.Event], tail: shapeless.HNil)List[example.API.Event] :: shapeless.HNil((pat$macro$34 @ _), shapeless.HNil)))) => API.this.EventsInternal.apply(pat$macro$31, pat$macro$32, pat$macro$33, pat$macro$34)
    }
  };
  (new anon$macro$35(): shapeless.Generic.Aux[example.API.EventsInternal,Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("count"), Int, (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("next"), Option[String], (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("previous"), Option[String], (Symbol @@ String("results")) :: shapeless.HNil, List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("results"), List[example.API.Event], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("results")]](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("results")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("previous")]](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("previous")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("next")]](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("next")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("count")]](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("count")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]](anon$importedDecoder$macro$47.this.inst$macro$36)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]];
      <stable> <accessor> lazy val inst$macro$36: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForcount: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForprevious: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericDecoderForresults: io.circe.Decoder[List[example.API.Event]] = circe.this.Decoder.decodeList[example.API.Event](circe.this.Decoder.importedDecoder[example.API.Event]((new io.circe.export.Exported[io.circe.Decoder[example.API.Event]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](anon$importedDecoder$macro$47.this.inst$macro$37)): io.circe.Decoder[example.API.Event])): io.circe.export.Exported[io.circe.Decoder[example.API.Event]])));
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecode(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecode(c.downField("results")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecodeAccumulating(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecodeAccumulating(c.downField("results")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$37: io.circe.generic.decoding.DerivedDecoder[example.API.Event] = decoding.this.DerivedDecoder.deriveDecoder[example.API.Event, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.Event, (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, Int :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.Event] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.Event]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("id"), (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")], shapeless.::.apply[Symbol @@ String("title"), (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")], shapeless.::.apply[Symbol @@ String("slug"), shapeless.HNil.type](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")], shapeless.HNil)))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.Event,(Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil]), {
  final class anon$macro$45 extends AnyRef with shapeless.Generic[example.API.Event] {
    def <init>(): anon$macro$45 = {
      anon$macro$45.super.<init>();
      ()
    };
    type Repr = Int :: String :: String :: shapeless.HNil;
    def to(p: example.API.Event): anon$macro$45.this.Repr = p match {
  case (id: Int, title: String, slug: String)example.API.Event((pat$macro$42 @ _), (pat$macro$43 @ _), (pat$macro$44 @ _)) => shapeless.::.apply[Int, String :: String :: shapeless.HNil.type](pat$macro$42, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$43, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$44, shapeless.HNil)))
}.asInstanceOf[anon$macro$45.this.Repr];
    def from(p: anon$macro$45.this.Repr): example.API.Event = p match {
      case (head: Int, tail: String :: String :: shapeless.HNil)Int :: String :: String :: shapeless.HNil((pat$macro$42 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$43 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$44 @ _), shapeless.HNil))) => API.this.Event.apply(pat$macro$42, pat$macro$43, pat$macro$44)
    }
  };
  (new anon$macro$45(): shapeless.Generic.Aux[example.API.Event,Int :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("id"), Int, (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("title"), String, (Symbol @@ String("slug")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("slug"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("slug")]](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("slug")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("title")]](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("title")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("id")]](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("id")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]](anon$importedDecoder$macro$47.this.inst$macro$46)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.Event]];
      <stable> <accessor> lazy val inst$macro$46: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForid: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForslug: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecode(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("slug")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecodeAccumulating(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("slug")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]]
    };
    new anon$importedDecoder$macro$47().inst$macro$25
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]](inst$macro$48)
}): io.circe.Decoder[example.API.EventsInternal])): io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]])))).|>[scala.util.Try[example.API.EventsInternal]](((either: Either[io.circe.Error,example.API.EventsInternal]) => Utils.toTry[example.API.EventsInternal](either)))

437
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13192
13216
380
scala.util.Try.isSuccess
Select
false
0
false
eventsInternal.isSuccess

438
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13270
13279
381
scala.collection.immutable.List.::
Apply
false
0
false
result.::[List[example.API.Event]](rassoc$1)

439
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13234
13279
381
<nosymbol>
Assign
true
0
false
result = {
  final <synthetic> <artifact> val rassoc$1: List[example.API.Event] = eventsInternal.get.results;
  result.::[List[example.API.Event]](rassoc$1)
}

440
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13392
13402
385
java.lang.Throwable.toString
Apply
false
0
false
e.toString()

441
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13327
13418
384
example.API.events
Return
true
0
false
return eventsInternal match {
  case (exception: Throwable)scala.util.Failure[example.API.EventsInternal]((e @ _)) => e.toString()
}

442
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13064
13064
378
example.API.while$2
Apply
false
0
false
while$2()

443
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13064
13444
378
<nosymbol>
Block
true
0
false
{
  {
    eventsInternal = scalaz.Scalaz.ToIdOps[Either[io.circe.Error,example.API.EventsInternal]](io.circe.parser.`package`.decode[example.API.EventsInternal](scalaj.http.Http.apply(eventsInternal.get.next.get).asString.body)(circe.this.Decoder.importedDecoder[example.API.EventsInternal]((new io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]]({
  val inst$macro$48: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = {
    final class anon$importedDecoder$macro$47 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$47 = {
        anon$importedDecoder$macro$47.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$25: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = decoding.this.DerivedDecoder.deriveDecoder[example.API.EventsInternal, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.EventsInternal, (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.EventsInternal] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.EventsInternal]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("count"), (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")], shapeless.::.apply[Symbol @@ String("next"), (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")], shapeless.::.apply[Symbol @@ String("previous"), (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")], shapeless.::.apply[Symbol @@ String("results"), shapeless.HNil.type](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.EventsInternal,(Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil]), {
  final class anon$macro$35 extends AnyRef with shapeless.Generic[example.API.EventsInternal] {
    def <init>(): anon$macro$35 = {
      anon$macro$35.super.<init>();
      ()
    };
    type Repr = Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil;
    def to(p: example.API.EventsInternal): anon$macro$35.this.Repr = p match {
  case (count: Int, next: Option[String], previous: Option[String], results: List[example.API.Event])example.API.EventsInternal((pat$macro$31 @ _), (pat$macro$32 @ _), (pat$macro$33 @ _), (pat$macro$34 @ _)) => shapeless.::.apply[Int, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$31, shapeless.::.apply[Option[String], Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$32, shapeless.::.apply[Option[String], List[example.API.Event] :: shapeless.HNil.type](pat$macro$33, shapeless.::.apply[List[example.API.Event], shapeless.HNil.type](pat$macro$34, shapeless.HNil))))
}.asInstanceOf[anon$macro$35.this.Repr];
    def from(p: anon$macro$35.this.Repr): example.API.EventsInternal = p match {
      case (head: Int, tail: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil)Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$31 @ _), (head: Option[String], tail: Option[String] :: List[example.API.Event] :: shapeless.HNil)Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$32 @ _), (head: Option[String], tail: List[example.API.Event] :: shapeless.HNil)Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$33 @ _), (head: List[example.API.Event], tail: shapeless.HNil)List[example.API.Event] :: shapeless.HNil((pat$macro$34 @ _), shapeless.HNil)))) => API.this.EventsInternal.apply(pat$macro$31, pat$macro$32, pat$macro$33, pat$macro$34)
    }
  };
  (new anon$macro$35(): shapeless.Generic.Aux[example.API.EventsInternal,Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("count"), Int, (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("next"), Option[String], (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("previous"), Option[String], (Symbol @@ String("results")) :: shapeless.HNil, List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("results"), List[example.API.Event], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("results")]](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("results")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("previous")]](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("previous")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("next")]](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("next")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("count")]](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("count")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]](anon$importedDecoder$macro$47.this.inst$macro$36)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]];
      <stable> <accessor> lazy val inst$macro$36: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForcount: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForprevious: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericDecoderForresults: io.circe.Decoder[List[example.API.Event]] = circe.this.Decoder.decodeList[example.API.Event](circe.this.Decoder.importedDecoder[example.API.Event]((new io.circe.export.Exported[io.circe.Decoder[example.API.Event]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](anon$importedDecoder$macro$47.this.inst$macro$37)): io.circe.Decoder[example.API.Event])): io.circe.export.Exported[io.circe.Decoder[example.API.Event]])));
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecode(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecode(c.downField("results")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecodeAccumulating(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecodeAccumulating(c.downField("results")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$37: io.circe.generic.decoding.DerivedDecoder[example.API.Event] = decoding.this.DerivedDecoder.deriveDecoder[example.API.Event, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.Event, (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, Int :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.Event] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.Event]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("id"), (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")], shapeless.::.apply[Symbol @@ String("title"), (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")], shapeless.::.apply[Symbol @@ String("slug"), shapeless.HNil.type](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")], shapeless.HNil)))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.Event,(Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil]), {
  final class anon$macro$45 extends AnyRef with shapeless.Generic[example.API.Event] {
    def <init>(): anon$macro$45 = {
      anon$macro$45.super.<init>();
      ()
    };
    type Repr = Int :: String :: String :: shapeless.HNil;
    def to(p: example.API.Event): anon$macro$45.this.Repr = p match {
  case (id: Int, title: String, slug: String)example.API.Event((pat$macro$42 @ _), (pat$macro$43 @ _), (pat$macro$44 @ _)) => shapeless.::.apply[Int, String :: String :: shapeless.HNil.type](pat$macro$42, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$43, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$44, shapeless.HNil)))
}.asInstanceOf[anon$macro$45.this.Repr];
    def from(p: anon$macro$45.this.Repr): example.API.Event = p match {
      case (head: Int, tail: String :: String :: shapeless.HNil)Int :: String :: String :: shapeless.HNil((pat$macro$42 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$43 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$44 @ _), shapeless.HNil))) => API.this.Event.apply(pat$macro$42, pat$macro$43, pat$macro$44)
    }
  };
  (new anon$macro$45(): shapeless.Generic.Aux[example.API.Event,Int :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("id"), Int, (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("title"), String, (Symbol @@ String("slug")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("slug"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("slug")]](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("slug")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("title")]](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("title")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("id")]](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("id")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]](anon$importedDecoder$macro$47.this.inst$macro$46)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.Event]];
      <stable> <accessor> lazy val inst$macro$46: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForid: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForslug: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecode(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("slug")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecodeAccumulating(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("slug")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]]
    };
    new anon$importedDecoder$macro$47().inst$macro$25
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]](inst$macro$48)
}): io.circe.Decoder[example.API.EventsInternal])): io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]])))).|>[scala.util.Try[example.API.EventsInternal]](((either: Either[io.circe.Error,example.API.EventsInternal]) => Utils.toTry[example.API.EventsInternal](either)));
    if (eventsInternal.isSuccess)
      result = {
        final <synthetic> <artifact> val rassoc$1: List[example.API.Event] = eventsInternal.get.results;
        result.::[List[example.API.Event]](rassoc$1)
      }
    else
      return eventsInternal match {
        case (exception: Throwable)scala.util.Failure[example.API.EventsInternal]((e @ _)) => e.toString()
      }
  };
  while$2()
}

444
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13025
13025
378
<nosymbol>
Literal
false
0
false
()

445
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13025
13025
378
<nosymbol>
Block
true
0
false
()

446
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13462
13462
389
scala.Predef.$conforms
TypeApply
false
0
false
scala.Predef.$conforms[List[example.API.Event]]

447
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13455
13469
389
scala.collection.StrictOptimizedIterableOps.flatten
ApplyToImplicitArgs
false
0
false
result.flatten[example.API.Event](scala.Predef.$conforms[List[example.API.Event]])

448
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12957
13479
376
<nosymbol>
Block
true
0
false
{
  var result: List[List[example.API.Event]] = scala.collection.immutable.List.apply[List[example.API.Event]](eventsInternal.get.results);
  while$2(){
    if (eventsInternal.get.next.!=(scala.None))
      {
        {
          eventsInternal = scalaz.Scalaz.ToIdOps[Either[io.circe.Error,example.API.EventsInternal]](io.circe.parser.`package`.decode[example.API.EventsInternal](scalaj.http.Http.apply(eventsInternal.get.next.get).asString.body)(circe.this.Decoder.importedDecoder[example.API.EventsInternal]((new io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]]({
  val inst$macro$48: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = {
    final class anon$importedDecoder$macro$47 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$47 = {
        anon$importedDecoder$macro$47.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$25: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = decoding.this.DerivedDecoder.deriveDecoder[example.API.EventsInternal, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.EventsInternal, (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.EventsInternal] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.EventsInternal]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("count"), (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")], shapeless.::.apply[Symbol @@ String("next"), (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")], shapeless.::.apply[Symbol @@ String("previous"), (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")], shapeless.::.apply[Symbol @@ String("results"), shapeless.HNil.type](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.EventsInternal,(Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil]), {
  final class anon$macro$35 extends AnyRef with shapeless.Generic[example.API.EventsInternal] {
    def <init>(): anon$macro$35 = {
      anon$macro$35.super.<init>();
      ()
    };
    type Repr = Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil;
    def to(p: example.API.EventsInternal): anon$macro$35.this.Repr = p match {
  case (count: Int, next: Option[String], previous: Option[String], results: List[example.API.Event])example.API.EventsInternal((pat$macro$31 @ _), (pat$macro$32 @ _), (pat$macro$33 @ _), (pat$macro$34 @ _)) => shapeless.::.apply[Int, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$31, shapeless.::.apply[Option[String], Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$32, shapeless.::.apply[Option[String], List[example.API.Event] :: shapeless.HNil.type](pat$macro$33, shapeless.::.apply[List[example.API.Event], shapeless.HNil.type](pat$macro$34, shapeless.HNil))))
}.asInstanceOf[anon$macro$35.this.Repr];
    def from(p: anon$macro$35.this.Repr): example.API.EventsInternal = p match {
      case (head: Int, tail: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil)Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$31 @ _), (head: Option[String], tail: Option[String] :: List[example.API.Event] :: shapeless.HNil)Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$32 @ _), (head: Option[String], tail: List[example.API.Event] :: shapeless.HNil)Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$33 @ _), (head: List[example.API.Event], tail: shapeless.HNil)List[example.API.Event] :: shapeless.HNil((pat$macro$34 @ _), shapeless.HNil)))) => API.this.EventsInternal.apply(pat$macro$31, pat$macro$32, pat$macro$33, pat$macro$34)
    }
  };
  (new anon$macro$35(): shapeless.Generic.Aux[example.API.EventsInternal,Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("count"), Int, (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("next"), Option[String], (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("previous"), Option[String], (Symbol @@ String("results")) :: shapeless.HNil, List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("results"), List[example.API.Event], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("results")]](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("results")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("previous")]](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("previous")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("next")]](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("next")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("count")]](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("count")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]](anon$importedDecoder$macro$47.this.inst$macro$36)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]];
      <stable> <accessor> lazy val inst$macro$36: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForcount: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForprevious: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericDecoderForresults: io.circe.Decoder[List[example.API.Event]] = circe.this.Decoder.decodeList[example.API.Event](circe.this.Decoder.importedDecoder[example.API.Event]((new io.circe.export.Exported[io.circe.Decoder[example.API.Event]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](anon$importedDecoder$macro$47.this.inst$macro$37)): io.circe.Decoder[example.API.Event])): io.circe.export.Exported[io.circe.Decoder[example.API.Event]])));
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecode(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecode(c.downField("results")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecodeAccumulating(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecodeAccumulating(c.downField("results")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$37: io.circe.generic.decoding.DerivedDecoder[example.API.Event] = decoding.this.DerivedDecoder.deriveDecoder[example.API.Event, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.Event, (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, Int :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.Event] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.Event]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("id"), (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")], shapeless.::.apply[Symbol @@ String("title"), (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")], shapeless.::.apply[Symbol @@ String("slug"), shapeless.HNil.type](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")], shapeless.HNil)))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.Event,(Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil]), {
  final class anon$macro$45 extends AnyRef with shapeless.Generic[example.API.Event] {
    def <init>(): anon$macro$45 = {
      anon$macro$45.super.<init>();
      ()
    };
    type Repr = Int :: String :: String :: shapeless.HNil;
    def to(p: example.API.Event): anon$macro$45.this.Repr = p match {
  case (id: Int, title: String, slug: String)example.API.Event((pat$macro$42 @ _), (pat$macro$43 @ _), (pat$macro$44 @ _)) => shapeless.::.apply[Int, String :: String :: shapeless.HNil.type](pat$macro$42, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$43, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$44, shapeless.HNil)))
}.asInstanceOf[anon$macro$45.this.Repr];
    def from(p: anon$macro$45.this.Repr): example.API.Event = p match {
      case (head: Int, tail: String :: String :: shapeless.HNil)Int :: String :: String :: shapeless.HNil((pat$macro$42 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$43 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$44 @ _), shapeless.HNil))) => API.this.Event.apply(pat$macro$42, pat$macro$43, pat$macro$44)
    }
  };
  (new anon$macro$45(): shapeless.Generic.Aux[example.API.Event,Int :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("id"), Int, (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("title"), String, (Symbol @@ String("slug")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("slug"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("slug")]](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("slug")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("title")]](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("title")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("id")]](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("id")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]](anon$importedDecoder$macro$47.this.inst$macro$46)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.Event]];
      <stable> <accessor> lazy val inst$macro$46: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForid: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForslug: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecode(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("slug")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecodeAccumulating(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("slug")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]]
    };
    new anon$importedDecoder$macro$47().inst$macro$25
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]](inst$macro$48)
}): io.circe.Decoder[example.API.EventsInternal])): io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]])))).|>[scala.util.Try[example.API.EventsInternal]](((either: Either[io.circe.Error,example.API.EventsInternal]) => Utils.toTry[example.API.EventsInternal](either)));
          if (eventsInternal.isSuccess)
            result = {
              final <synthetic> <artifact> val rassoc$1: List[example.API.Event] = eventsInternal.get.results;
              result.::[List[example.API.Event]](rassoc$1)
            }
          else
            return eventsInternal match {
              case (exception: Throwable)scala.util.Failure[example.API.EventsInternal]((e @ _)) => e.toString()
            }
        };
        while$2()
      }
    else
      ()
  };
  result.flatten[example.API.Event](scala.Predef.$conforms[List[example.API.Event]])
}

449
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13559
13569
393
java.lang.Throwable.toString
Apply
false
0
false
e.toString()

450
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13505
13581
392
<nosymbol>
Match
true
0
false
eventsInternal match {
  case (exception: Throwable)scala.util.Failure[example.API.EventsInternal]((e @ _)) => e.toString()
}

451
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
12483
13599
365
scala.collection.WithFilter.map
Apply
false
0
false
dates.withFilter(((check$ifrefutable$1: (com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime)) => (check$ifrefutable$1: (com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime) @unchecked) match {
  case (_1: com.github.nscala_time.time.Imports.DateTime, _2: com.github.nscala_time.time.Imports.DateTime)(com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime)((start @ _), (end @ _)) => true
  case _ => false
})).map[java.io.Serializable](((x$14: (com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime)) => (x$14: (com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime) @unchecked) match {
  case (_1: com.github.nscala_time.time.Imports.DateTime, _2: com.github.nscala_time.time.Imports.DateTime)(com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime)((start @ _), (end @ _)) => {
    val str: String = scalaj.http.Http.apply("https://kudago.com/public-api/v1.4/events/").param("page_size", "100").param("location", city).param("actual_since", start.toString()).param("actual_until", end.toString()).param("categories", categories.mkString(",")).asString.body;
    var eventsInternal: scala.util.Try[example.API.EventsInternal] = scalaz.Scalaz.ToIdOps[Either[io.circe.Error,example.API.EventsInternal]](io.circe.parser.`package`.decode[example.API.EventsInternal](str)(circe.this.Decoder.importedDecoder[example.API.EventsInternal]((new io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]]({
  val inst$macro$24: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = {
    final class anon$importedDecoder$macro$23 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$23 = {
        anon$importedDecoder$macro$23.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$1: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = decoding.this.DerivedDecoder.deriveDecoder[example.API.EventsInternal, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.EventsInternal, (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.EventsInternal] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.EventsInternal]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("count"), (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")], shapeless.::.apply[Symbol @@ String("next"), (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")], shapeless.::.apply[Symbol @@ String("previous"), (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")], shapeless.::.apply[Symbol @@ String("results"), shapeless.HNil.type](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.EventsInternal,(Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil]), {
  final class anon$macro$11 extends AnyRef with shapeless.Generic[example.API.EventsInternal] {
    def <init>(): anon$macro$11 = {
      anon$macro$11.super.<init>();
      ()
    };
    type Repr = Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil;
    def to(p: example.API.EventsInternal): anon$macro$11.this.Repr = p match {
  case (count: Int, next: Option[String], previous: Option[String], results: List[example.API.Event])example.API.EventsInternal((pat$macro$7 @ _), (pat$macro$8 @ _), (pat$macro$9 @ _), (pat$macro$10 @ _)) => shapeless.::.apply[Int, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$7, shapeless.::.apply[Option[String], Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$8, shapeless.::.apply[Option[String], List[example.API.Event] :: shapeless.HNil.type](pat$macro$9, shapeless.::.apply[List[example.API.Event], shapeless.HNil.type](pat$macro$10, shapeless.HNil))))
}.asInstanceOf[anon$macro$11.this.Repr];
    def from(p: anon$macro$11.this.Repr): example.API.EventsInternal = p match {
      case (head: Int, tail: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil)Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$7 @ _), (head: Option[String], tail: Option[String] :: List[example.API.Event] :: shapeless.HNil)Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$8 @ _), (head: Option[String], tail: List[example.API.Event] :: shapeless.HNil)Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$9 @ _), (head: List[example.API.Event], tail: shapeless.HNil)List[example.API.Event] :: shapeless.HNil((pat$macro$10 @ _), shapeless.HNil)))) => API.this.EventsInternal.apply(pat$macro$7, pat$macro$8, pat$macro$9, pat$macro$10)
    }
  };
  (new anon$macro$11(): shapeless.Generic.Aux[example.API.EventsInternal,Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("count"), Int, (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("next"), Option[String], (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("previous"), Option[String], (Symbol @@ String("results")) :: shapeless.HNil, List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("results"), List[example.API.Event], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("results")]](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("results")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("previous")]](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("previous")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("next")]](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("next")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("count")]](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("count")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]](anon$importedDecoder$macro$23.this.inst$macro$12)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]];
      <stable> <accessor> lazy val inst$macro$12: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForcount: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForprevious: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericDecoderForresults: io.circe.Decoder[List[example.API.Event]] = circe.this.Decoder.decodeList[example.API.Event](circe.this.Decoder.importedDecoder[example.API.Event]((new io.circe.export.Exported[io.circe.Decoder[example.API.Event]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](anon$importedDecoder$macro$23.this.inst$macro$13)): io.circe.Decoder[example.API.Event])): io.circe.export.Exported[io.circe.Decoder[example.API.Event]])));
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecode(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecode(c.downField("results")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecodeAccumulating(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecodeAccumulating(c.downField("results")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$13: io.circe.generic.decoding.DerivedDecoder[example.API.Event] = decoding.this.DerivedDecoder.deriveDecoder[example.API.Event, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.Event, (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, Int :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.Event] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.Event]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("id"), (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")], shapeless.::.apply[Symbol @@ String("title"), (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")], shapeless.::.apply[Symbol @@ String("slug"), shapeless.HNil.type](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")], shapeless.HNil)))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.Event,(Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil]), {
  final class anon$macro$21 extends AnyRef with shapeless.Generic[example.API.Event] {
    def <init>(): anon$macro$21 = {
      anon$macro$21.super.<init>();
      ()
    };
    type Repr = Int :: String :: String :: shapeless.HNil;
    def to(p: example.API.Event): anon$macro$21.this.Repr = p match {
  case (id: Int, title: String, slug: String)example.API.Event((pat$macro$18 @ _), (pat$macro$19 @ _), (pat$macro$20 @ _)) => shapeless.::.apply[Int, String :: String :: shapeless.HNil.type](pat$macro$18, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$19, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$20, shapeless.HNil)))
}.asInstanceOf[anon$macro$21.this.Repr];
    def from(p: anon$macro$21.this.Repr): example.API.Event = p match {
      case (head: Int, tail: String :: String :: shapeless.HNil)Int :: String :: String :: shapeless.HNil((pat$macro$18 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$19 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$20 @ _), shapeless.HNil))) => API.this.Event.apply(pat$macro$18, pat$macro$19, pat$macro$20)
    }
  };
  (new anon$macro$21(): shapeless.Generic.Aux[example.API.Event,Int :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("id"), Int, (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("title"), String, (Symbol @@ String("slug")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("slug"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("slug")]](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("slug")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("title")]](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("title")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("id")]](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("id")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]](anon$importedDecoder$macro$23.this.inst$macro$22)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.Event]];
      <stable> <accessor> lazy val inst$macro$22: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForid: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForslug: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecode(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("slug")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecodeAccumulating(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("slug")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]]
    };
    new anon$importedDecoder$macro$23().inst$macro$1
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]](inst$macro$24)
}): io.circe.Decoder[example.API.EventsInternal])): io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]])))).|>[scala.util.Try[example.API.EventsInternal]](((either: Either[io.circe.Error,example.API.EventsInternal]) => Utils.toTry[example.API.EventsInternal](either)));
    if (eventsInternal.isSuccess)
      {
        var result: List[List[example.API.Event]] = scala.collection.immutable.List.apply[List[example.API.Event]](eventsInternal.get.results);
        while$2(){
          if (eventsInternal.get.next.!=(scala.None))
            {
              {
                eventsInternal = scalaz.Scalaz.ToIdOps[Either[io.circe.Error,example.API.EventsInternal]](io.circe.parser.`package`.decode[example.API.EventsInternal](scalaj.http.Http.apply(eventsInternal.get.next.get).asString.body)(circe.this.Decoder.importedDecoder[example.API.EventsInternal]((new io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]]({
  val inst$macro$48: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = {
    final class anon$importedDecoder$macro$47 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$47 = {
        anon$importedDecoder$macro$47.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$25: io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal] = decoding.this.DerivedDecoder.deriveDecoder[example.API.EventsInternal, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.EventsInternal, (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.EventsInternal] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.EventsInternal]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("count"), (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")], shapeless.::.apply[Symbol @@ String("next"), (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")], shapeless.::.apply[Symbol @@ String("previous"), (Symbol @@ String("results")) :: shapeless.HNil.type](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")], shapeless.::.apply[Symbol @@ String("results"), shapeless.HNil.type](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.EventsInternal,(Symbol @@ String("count")) :: (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil]), {
  final class anon$macro$35 extends AnyRef with shapeless.Generic[example.API.EventsInternal] {
    def <init>(): anon$macro$35 = {
      anon$macro$35.super.<init>();
      ()
    };
    type Repr = Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil;
    def to(p: example.API.EventsInternal): anon$macro$35.this.Repr = p match {
  case (count: Int, next: Option[String], previous: Option[String], results: List[example.API.Event])example.API.EventsInternal((pat$macro$31 @ _), (pat$macro$32 @ _), (pat$macro$33 @ _), (pat$macro$34 @ _)) => shapeless.::.apply[Int, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$31, shapeless.::.apply[Option[String], Option[String] :: List[example.API.Event] :: shapeless.HNil.type](pat$macro$32, shapeless.::.apply[Option[String], List[example.API.Event] :: shapeless.HNil.type](pat$macro$33, shapeless.::.apply[List[example.API.Event], shapeless.HNil.type](pat$macro$34, shapeless.HNil))))
}.asInstanceOf[anon$macro$35.this.Repr];
    def from(p: anon$macro$35.this.Repr): example.API.EventsInternal = p match {
      case (head: Int, tail: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil)Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$31 @ _), (head: Option[String], tail: Option[String] :: List[example.API.Event] :: shapeless.HNil)Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$32 @ _), (head: Option[String], tail: List[example.API.Event] :: shapeless.HNil)Option[String] :: List[example.API.Event] :: shapeless.HNil((pat$macro$33 @ _), (head: List[example.API.Event], tail: shapeless.HNil)List[example.API.Event] :: shapeless.HNil((pat$macro$34 @ _), shapeless.HNil)))) => API.this.EventsInternal.apply(pat$macro$31, pat$macro$32, pat$macro$33, pat$macro$34)
    }
  };
  (new anon$macro$35(): shapeless.Generic.Aux[example.API.EventsInternal,Int :: Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("count"), Int, (Symbol @@ String("next")) :: (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("next"), Option[String], (Symbol @@ String("previous")) :: (Symbol @@ String("results")) :: shapeless.HNil, Option[String] :: List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("previous"), Option[String], (Symbol @@ String("results")) :: shapeless.HNil, List[example.API.Event] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("results"), List[example.API.Event], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("results")]](scala.Symbol.apply("results").asInstanceOf[Symbol @@ String("results")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("results")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("previous")]](scala.Symbol.apply("previous").asInstanceOf[Symbol @@ String("previous")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("previous")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("next")]](scala.Symbol.apply("next").asInstanceOf[Symbol @@ String("next")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("next")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("count")]](scala.Symbol.apply("count").asInstanceOf[Symbol @@ String("count")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("count")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("count"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("next"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("previous"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("results"),List[example.API.Event]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]](anon$importedDecoder$macro$47.this.inst$macro$36)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]];
      <stable> <accessor> lazy val inst$macro$36: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForcount: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForprevious: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericDecoderForresults: io.circe.Decoder[List[example.API.Event]] = circe.this.Decoder.decodeList[example.API.Event](circe.this.Decoder.importedDecoder[example.API.Event]((new io.circe.export.Exported[io.circe.Decoder[example.API.Event]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.Event]](anon$importedDecoder$macro$47.this.inst$macro$37)): io.circe.Decoder[example.API.Event])): io.circe.export.Exported[io.circe.Decoder[example.API.Event]])));
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecode(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecode(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecode(c.downField("results")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("count")], Int, Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForcount.tryDecodeAccumulating(c.downField("count")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("next")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("next")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("previous")], Option[String], List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]($anon.this.circeGenericDecoderForprevious.tryDecodeAccumulating(c.downField("previous")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("results")], List[example.API.Event], shapeless.HNil]($anon.this.circeGenericDecoderForresults.tryDecodeAccumulating(c.downField("results")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("count")],Int] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("next")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("previous")],Option[String]] :: List[example.API.Event] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("results")],List[example.API.Event]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$37: io.circe.generic.decoding.DerivedDecoder[example.API.Event] = decoding.this.DerivedDecoder.deriveDecoder[example.API.Event, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[example.API.Event, (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, Int :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[example.API.Event] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[example.API.Event]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("id"), (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")], shapeless.::.apply[Symbol @@ String("title"), (Symbol @@ String("slug")) :: shapeless.HNil.type](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")], shapeless.::.apply[Symbol @@ String("slug"), shapeless.HNil.type](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")], shapeless.HNil)))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[example.API.Event,(Symbol @@ String("id")) :: (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil]), {
  final class anon$macro$45 extends AnyRef with shapeless.Generic[example.API.Event] {
    def <init>(): anon$macro$45 = {
      anon$macro$45.super.<init>();
      ()
    };
    type Repr = Int :: String :: String :: shapeless.HNil;
    def to(p: example.API.Event): anon$macro$45.this.Repr = p match {
  case (id: Int, title: String, slug: String)example.API.Event((pat$macro$42 @ _), (pat$macro$43 @ _), (pat$macro$44 @ _)) => shapeless.::.apply[Int, String :: String :: shapeless.HNil.type](pat$macro$42, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$43, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$44, shapeless.HNil)))
}.asInstanceOf[anon$macro$45.this.Repr];
    def from(p: anon$macro$45.this.Repr): example.API.Event = p match {
      case (head: Int, tail: String :: String :: shapeless.HNil)Int :: String :: String :: shapeless.HNil((pat$macro$42 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$43 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$44 @ _), shapeless.HNil))) => API.this.Event.apply(pat$macro$42, pat$macro$43, pat$macro$44)
    }
  };
  (new anon$macro$45(): shapeless.Generic.Aux[example.API.Event,Int :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("id"), Int, (Symbol @@ String("title")) :: (Symbol @@ String("slug")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("title"), String, (Symbol @@ String("slug")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("slug"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("slug")]](scala.Symbol.apply("slug").asInstanceOf[Symbol @@ String("slug")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("slug")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("title")]](scala.Symbol.apply("title").asInstanceOf[Symbol @@ String("title")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("title")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("id")]](scala.Symbol.apply("id").asInstanceOf[Symbol @@ String("id")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("id")]])), scala.this.<:<.refl[shapeless.labelled.FieldType[Symbol @@ String("id"),Int] :: shapeless.labelled.FieldType[Symbol @@ String("title"),String] :: shapeless.labelled.FieldType[Symbol @@ String("slug"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]](anon$importedDecoder$macro$47.this.inst$macro$46)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[example.API.Event]];
      <stable> <accessor> lazy val inst$macro$46: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericDecoderForid: io.circe.Decoder[Int] = circe.this.Decoder.decodeInt;
    private[this] val circeGenericDecoderForslug: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecode(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecode(c.downField("slug")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.Decoder.AccumulatingResult[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("id")], Int, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForid.tryDecodeAccumulating(c.downField("id")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("title")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("title")), ReprDecoder.consResults[io.circe.Decoder.AccumulatingResult, Symbol with shapeless.tag.Tagged[String("slug")], String, shapeless.HNil]($anon.this.circeGenericDecoderForslug.tryDecodeAccumulating(c.downField("slug")), ReprDecoder.hnilResultAccumulating)(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance))(io.circe.Decoder.accumulatingResultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Int with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("id")],Int] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("title")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("slug")],String] :: shapeless.HNil]]
    };
    new anon$importedDecoder$macro$47().inst$macro$25
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[example.API.EventsInternal]](inst$macro$48)
}): io.circe.Decoder[example.API.EventsInternal])): io.circe.export.Exported[io.circe.Decoder[example.API.EventsInternal]])))).|>[scala.util.Try[example.API.EventsInternal]](((either: Either[io.circe.Error,example.API.EventsInternal]) => Utils.toTry[example.API.EventsInternal](either)));
                if (eventsInternal.isSuccess)
                  result = {
                    final <synthetic> <artifact> val rassoc$1: List[example.API.Event] = eventsInternal.get.results;
                    result.::[List[example.API.Event]](rassoc$1)
                  }
                else
                  return eventsInternal match {
                    case (exception: Throwable)scala.util.Failure[example.API.EventsInternal]((e @ _)) => e.toString()
                  }
              };
              while$2()
            }
          else
            ()
        };
        result.flatten[example.API.Event](scala.Predef.$conforms[List[example.API.Event]])
      }
    else
      eventsInternal match {
        case (exception: Throwable)scala.util.Failure[example.API.EventsInternal]((e @ _)) => e.toString()
      }
  }
}))

452
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13680
13680
399
<nosymbol>
Literal
false
0
false
true

453
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13734
13764
400
com.github.nscala_time.time.StaticDateTimeZone.forOffsetHours
Apply
false
0
false
com.github.nscala_time.time.Imports.DateTimeZone.forOffsetHours(3)

454
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13719
13765
400
org.joda.time.DateTime.withZone
Apply
false
0
false
start.withZone(com.github.nscala_time.time.Imports.DateTimeZone.forOffsetHours(3))

455
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13798
13828
401
com.github.nscala_time.time.StaticDateTimeZone.forOffsetHours
Apply
false
0
false
com.github.nscala_time.time.Imports.DateTimeZone.forOffsetHours(3)

456
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13785
13829
401
org.joda.time.DateTime.withZone
Apply
false
0
false
end.withZone(com.github.nscala_time.time.Imports.DateTimeZone.forOffsetHours(3))

457
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13851
13890
402
org.joda.time.base.AbstractDateTime.toString
Apply
false
0
false
startL.toString("EEE HH:mm dd-MM-YYYY")

458
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13910
13947
403
org.joda.time.base.AbstractDateTime.toString
Apply
false
0
false
endL.toString("EEE HH:mm dd-MM-YYYY")

459
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
14040
14133
405
scala.collection.IterableOnceOps.mkString
Apply
false
0
false
eventsList.map[String](((x: example.API.Event) => {
  val id: Int = x.id;
  val title: String = x.title;
  ("".+(id).+(" - ").+(title): String)
})).mkString("\n\t - ")

460
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
14142
14165
406
scala.collection.StringOps.++
Apply
false
0
false
scala.Predef.augmentString(startEnd).++(eventsNames)

461
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
13624
14173
399
scala.collection.WithFilter.map
Apply
false
0
false
dates.zip[java.io.Serializable](events).withFilter(((check$ifrefutable$2: ((com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime), java.io.Serializable)) => (check$ifrefutable$2: ((com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime), java.io.Serializable) @unchecked) match {
  case (_1: (com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime), _2: java.io.Serializable)((com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime), java.io.Serializable)((_1: com.github.nscala_time.time.Imports.DateTime, _2: com.github.nscala_time.time.Imports.DateTime)(com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime)((start @ _), (end @ _)), (eventsList @ (_: List[example.API.Event]))) => true
  case _ => false
})).map[String](((x$15: ((com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime), java.io.Serializable)) => (x$15: ((com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime), java.io.Serializable) @unchecked) match {
  case (_1: (com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime), _2: java.io.Serializable)((com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime), java.io.Serializable)((_1: com.github.nscala_time.time.Imports.DateTime, _2: com.github.nscala_time.time.Imports.DateTime)(com.github.nscala_time.time.Imports.DateTime, com.github.nscala_time.time.Imports.DateTime)((start @ _), (end @ _)), (eventsList @ (_: List[example.API.Event]))) => {
    val startL: org.joda.time.DateTime = start.withZone(com.github.nscala_time.time.Imports.DateTimeZone.forOffsetHours(3));
    val endL: org.joda.time.DateTime = end.withZone(com.github.nscala_time.time.Imports.DateTimeZone.forOffsetHours(3));
    val startS: String = startL.toString("EEE HH:mm dd-MM-YYYY");
    val endS: String = endL.toString("EEE HH:mm dd-MM-YYYY");
    val startEnd: String = ("\n\nStart: ".+(startS).+("; End: ").+(endS).+("; \n\t - "): String);
    val eventsNames: String = eventsList.map[String](((x: example.API.Event) => {
  val id: Int = x.id;
  val title: String = x.title;
  ("".+(id).+(" - ").+(title): String)
})).mkString("\n\t - ");
    scala.Predef.augmentString(startEnd).++(eventsNames)
  }
}))

462
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
API
Object
example.API
events
14178
14196
408
scala.collection.IterableOnceOps.mkString
Apply
false
0
false
output.mkString("")

463
/home/daniil/workspace/scala/meeting/src/main/scala/App/Main.scala
example
Main
Object
example.Main
<none>
14255
14268
416
example.Interface.startPrompt
Apply
false
0
false
Interface.startPrompt()

